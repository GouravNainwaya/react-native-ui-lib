{"componentChunkName":"component---src-templates-markdown-template-js","path":"/foundation/modifiers","result":{"data":{"markdownRemark":{"html":"<p>As you probably noticed already, we translate our style presets into modifiers.<br>\n<strong>Modifiers</strong> will help you create a stunning UI easily and quickly.</p>\n<p><strong>[!IMPORTANT]</strong> <br>\nMake sure to use modifiers only on uilib components, some modifiers can cause issues on Android when used on React Native components directly.</p>\n<h2>Layout Modifiers</h2>\n<p>Use our alignment props to quickly position your view's content without getting confused calculating all these flex rules.</p>\n<ul>\n<li>flex - apply <code>flex:1</code> on a view </li>\n<li>flex-[value] - When you want to control the flex value</li>\n<li>flexS - FlexShrink </li>\n<li>flexG - FlexGrow</li>\n<li>left</li>\n<li>top</li>\n<li>right</li>\n<li>bottom</li>\n<li>row - change direction to row (default is column)</li>\n<li>center</li>\n<li>centerH - center content horizontally</li>\n<li>centerV - center content vertically</li>\n<li>spread - spread content (similar to <code>space-between</code>)</li>\n</ul>\n<p>! Notice that the layout modifiers affect the View's children</p>\n<pre><code class=\"language-jsx\">&#x3C;View flex left>\n  &#x3C;Button label=\"Button\" />\n&#x3C;/View>\n\n&#x3C;View flex right>\n  &#x3C;Button label=\"Button\" />\n&#x3C;/View>\n\n&#x3C;View flex top>\n  &#x3C;Button label=\"Button\" />\n&#x3C;/View>\n\n&#x3C;View flex bottom>\n  &#x3C;Button label=\"Button\" />\n&#x3C;/View>\n\n&#x3C;View flex center>\n  &#x3C;Button label=\"Button\" />\n&#x3C;/View>\n</code></pre>\n<p><img src=\"https://cloud.githubusercontent.com/assets/1780255/24798566/4de91efc-1b9f-11e7-9974-e06e3daa7c63.png\" width=\"160\"/> <img src=\"https://cloud.githubusercontent.com/assets/1780255/24798569/50dc99a4-1b9f-11e7-8231-fbcbb139a010.png\" width=\"160\"/> <img src=\"https://cloud.githubusercontent.com/assets/1780255/24798571/52766d08-1b9f-11e7-95a3-b2b262e81170.png\" width=\"160\"/> <img src=\"https://cloud.githubusercontent.com/assets/1780255/24798572/545b7abe-1b9f-11e7-9098-409ceee6ff22.png\" width=\"160\"/> <img src=\"https://cloud.githubusercontent.com/assets/1780255/24798575/55e3c4f4-1b9f-11e7-998d-7986a038abb6.png\" width=\"160\"/></p>\n<h2>Spacing Modifiers</h2>\n<p>It's always important to use your margins and paddings correctly, with modifiers it is simpler to do so.</p>\n<ul>\n<li>padding-[value] - will add padding to all corners (e.g. padding-30 will add 30 pt of padding)</li>\n<li>paddingL-[value] - Left padding</li>\n<li>paddingT-[value] - Top padding</li>\n<li>paddingR-[value] - Right padding</li>\n<li>paddingB-[value] - Bottom padding</li>\n<li>paddingH-[value] - Horizontal padding</li>\n<li>\n<p>paddingV-[value] - Vertical padding</p>\n<pre><code class=\"language-jsx\">&#x3C;View paddingV-20 paddingH-30>...&#x3C;/View>\n</code></pre>\n</li>\n<li>margin-[value]</li>\n<li>marginL-[value] - Left margin</li>\n<li>marginT-[value] - Top margin</li>\n<li>marginR-[value] - Right margin</li>\n<li>marginB-[value] - Bottom margin</li>\n<li>marginH-[value] - Horizontal margin</li>\n<li>marginV-[value] - Vertical margin</li>\n</ul>\n<pre><code class=\"language-jsx\">&#x3C;View marginT-5 marginB-10>...&#x3C;/View>\n</code></pre>\n<p>! padding and margin modifiers can also take <a href=\"https://github.com/wix/react-native-ui-lib/blob/master/src/style/spacings.ts\">Spacing</a> constants. </p>\n<pre><code class=\"language-jsx\">&#x3C;View margin-s5 padding-s2>...&#x3C;/View>\n</code></pre>\n<h2>Position Modifiers</h2>\n<p>Use the position modifiers to quickly set an absolute position to your views</p>\n<ul>\n<li><code>abs</code> will set the absolute position on your View</li>\n<li><code>absL</code>, <code>absT</code>, <code>absR</code>, <code>absB</code> - set the absolute position and align to Left, Top, Right, Botton side accordingly</li>\n<li><code>absH</code> and <code>absV</code> - position absolute and stretch horizontally or vertically</li>\n<li><code>absF</code> will set the absolute position and fill the parent view (similar to StyleSheet.absoluteFillObject)</li>\n</ul>\n<h2>Styling Modifiers</h2>\n<p>Last type of modifiers are for styling your components</p>\n<ul>\n<li>[colorKey] - Controls text components' color</li>\n<li>background-[colorKey] (or bg-[colorKey]) - Background color </li>\n</ul>\n<pre><code class=\"language-jsx\">&#x3C;Text blue30>...&#x3C;/Text>\n&#x3C;View bg-grey70>...&#x3C;/View>\n&#x3C;TouchableOpacity bg-red30/>\n</code></pre>\n<ul>\n<li>\n<p>[typographyKey] - Controls text components' typography</p>\n<pre><code class=\"language-jsx\">&#x3C;Text text70>...&#x3C;/Text>\n&#x3C;TextInput text80/>\n</code></pre>\n</li>\n<li>\n<p>br[borderRadiusKey] - Set the view's border radius (e.g. <code>br10</code>, <code>br20</code>, .., <code>br60</code>)</p>\n<pre><code class=\"language-jsx\">&#x3C;View br40>...&#x3C;/View>\n</code></pre>\n</li>\n</ul>\n<p>! all styling modifiers are based on our <a href=\"/foundation/style\"><code>Colors</code> &#x26; <code>Typography</code> presets</a>. <br>\nYou can load your own presets and use them as modifiers. </p>\n<p>Check out <a href=\"/getting-started/usage\">this example</a> where we use most of these props</p>","frontmatter":{"path":"/foundation/modifiers","title":"Modifiers"}}},"pageContext":{}},"staticQueryHashes":["1243665866","3675868689"]}