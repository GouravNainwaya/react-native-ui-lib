{"componentChunkName":"component---src-templates-component-js","path":"/docs/Image","result":{"pageContext":{"componentNode":{"displayName":"Image","docblock":"@description: Image wrapper with extra functionality like source transform and assets support\n@extends: Image\n@extendsLink: https://reactnative.dev/docs/image\n@notes: please note that for SVG support you need to add both\n`react-native-svg` and `react-native-svg-transformer`,\nand also configure them (see `metro.config.js`)","description":{"text":"@description: Image wrapper with extra functionality like source transform and assets support\n@extends: Image\n@extendsLink: https://reactnative.dev/docs/image\n@notes: please note that for SVG support you need to add both\n`react-native-svg` and `react-native-svg-transformer`,\nand also configure them (see `metro.config.js`)"},"props":[{"name":"sourceTransformer","type":{"name":"(props: any) => ImageSourcePropType"},"description":{"text":"custom source transform handler for manipulating the image source (great for size control)"},"defaultValue":null},{"name":"assetName","type":{"name":"string"},"description":{"text":"if provided image source will be driven from asset name"},"defaultValue":null},{"name":"assetGroup","type":{"name":"string"},"description":{"text":"the asset group, default is \"icons\""},"defaultValue":{"value":"'icons'"}},{"name":"tintColor","type":{"name":"string"},"description":{"text":"the asset tint"},"defaultValue":null},{"name":"supportRTL","type":{"name":"boolean"},"description":{"text":"whether the image should flip horizontally on RTL locals"},"defaultValue":null},{"name":"cover","type":{"name":"boolean"},"description":{"text":"Show image as a cover, full width, image (according to aspect ratio, default: 16:8)"},"defaultValue":null},{"name":"aspectRatio","type":{"name":"number"},"description":{"text":"The aspect ratio for the image"},"defaultValue":null},{"name":"overlayType","type":{"name":"OverlayTypeType"},"description":{"text":"The type of overly to place on top of the image. Note: the image MUST have proper size, see examples in:\nhttps://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/OverlaysScreen.tsx"},"defaultValue":null},{"name":"overlayColor","type":{"name":"string"},"description":{"text":"Pass a custom color for the overlay"},"defaultValue":null},{"name":"customOverlayContent","type":{"name":"JSX.Element"},"description":{"text":"Render an overlay with custom content"},"defaultValue":null},{"name":"errorSource","type":{"name":"ImageSourcePropType"},"description":{"text":"Default image source in case of an error"},"defaultValue":null}]},"components":[{"node":{"displayName":"View","docblock":"@description: An enhanced View component\n@extends: View\n@extendsLink: https://reactnative.dev/docs/view\n@modifiers: margins, paddings, alignments, background, borderRadius","description":{"text":"@description: An enhanced View component\n@extends: View\n@extendsLink: https://reactnative.dev/docs/view\n@modifiers: margins, paddings, alignments, background, borderRadius"},"props":[{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":"If true, will render as SafeAreaView"},"defaultValue":null},{"name":"animated","type":{"name":"boolean"},"description":{"text":"Use Animate.View as a container"},"defaultValue":null},{"name":"reanimated","type":{"name":"boolean"},"description":{"text":"Use Animate.View (from react-native-reanimated) as a container"},"defaultValue":null},{"name":"inaccessible","type":{"name":"boolean"},"description":{"text":"Turn off accessibility for this view and its nested children"},"defaultValue":null},{"name":"width","type":{"name":"union"},"description":{"text":"TODO: probobly isn't needed"},"defaultValue":null},{"name":"height","type":{"name":"union"},"description":{"text":"TODO: probobly isn't needed"},"defaultValue":null},{"name":"renderDelay","type":{"name":"number"},"description":{"text":"Experimental: Pass time in ms to delay render"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Set background color"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle | Animated.AnimatedProps<ViewStyle>>"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Wizard.Step","docblock":"@description: WizardStep Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.tsx\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result.","description":{"text":"@description: WizardStep Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.tsx\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result."},"props":[{"name":"index","type":{"name":"number"},"description":{"text":""},"defaultValue":{"value":"0"}},{"name":"maxWidth","type":{"name":"number"},"description":{"text":""},"defaultValue":{"value":"0"}},{"name":"onPress","type":{"name":"WizardProps['onActiveIndexChanged']"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Wizard","docblock":"","description":{"text":""},"props":[{"name":"activeIndex","type":{"name":"number"},"description":{"text":"The active step's index"},"defaultValue":null},{"name":"activeConfig","type":{"name":"WizardStepProps"},"description":{"text":"The configuration of the active step (see Wizard.Step.propTypes)"},"defaultValue":null},{"name":"onActiveIndexChanged","type":{"name":"(index: number) => void"},"description":{"text":"Callback that is called when the active step is changed (i.e. a step was clicked on).\nThe new activeIndex will be the input of the callback."},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Add or override style of the container"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Wizard.Step","docblock":"","description":{"text":""},"props":[{"name":"state","type":{"name":"WizardStepStates"},"description":{"text":"The state of the step (Wizard.States.X)"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"The label of the item"},"defaultValue":null},{"name":"labelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Additional styles for the label"},"defaultValue":null},{"name":"connectorStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styles for the connector"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"Color of the step index (or of the icon, when provided)"},"defaultValue":null},{"name":"circleColor","type":{"name":"string"},"description":{"text":"Color of the circle"},"defaultValue":null},{"name":"circleSize","type":{"name":"number"},"description":{"text":"The step's circle size (diameter)"},"defaultValue":null},{"name":"circleBackgroundColor","type":{"name":"string"},"description":{"text":"Circle's background color"},"defaultValue":null},{"name":"icon","type":{"name":"ImageProps"},"description":{"text":"Icon to replace the (default) index"},"defaultValue":null},{"name":"indexLabelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Additional styles for the index's label (when icon is not provided)"},"defaultValue":null},{"name":"enabled","type":{"name":"boolean"},"description":{"text":"Whether the step should be enabled"},"defaultValue":null},{"name":"accessibilityInfo","type":{"name":"string"},"description":{"text":"Extra text to be read in accessibility mode"},"defaultValue":null}]}},{"node":{"displayName":"Wizard","docblock":"@description: Wizard Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.tsx\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result.\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Wizard/Wizard.gif?raw=true\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Wizard/WizardPresets.png?raw=true","description":{"text":"@description: Wizard Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.tsx\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result.\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Wizard/Wizard.gif?raw=true\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Wizard/WizardPresets.png?raw=true"},"props":[]}},{"node":{"displayName":"TextField","docblock":"","description":{"text":""},"props":[{"name":"migrate","type":null,"description":{"text":""},"defaultValue":{"value":"false"}}]}},{"node":{"displayName":"TouchableOpacity","docblock":"@description: A wrapper for TouchableOpacity component. Support onPress, throttling and activeBackgroundColor\n@modifiers: margins, paddings, alignments, background, borderRadius\n@extends: TouchableOpacity\n@extendsLink: https://reactnative.dev/docs/touchableopacity\n@gif: https://media.giphy.com/media/xULW8AMIgw7l31zjm8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/src/components/touchableOpacity/index.tsx","description":{"text":"@description: A wrapper for TouchableOpacity component. Support onPress, throttling and activeBackgroundColor\n@modifiers: margins, paddings, alignments, background, borderRadius\n@extends: TouchableOpacity\n@extendsLink: https://reactnative.dev/docs/touchableopacity\n@gif: https://media.giphy.com/media/xULW8AMIgw7l31zjm8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/src/components/touchableOpacity/index.tsx"},"props":[{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"background color for TouchableOpacity"},"defaultValue":null},{"name":"throttleTime","type":{"name":"number"},"description":{"text":"throttle time in MS for onPress callback"},"defaultValue":null},{"name":"throttleOptions","type":{"name":"{leading: boolean; trailing: boolean}"},"description":{"text":"throttle options {leading, trailing}"},"defaultValue":null},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"Apply background color on TouchableOpacity when active (press is on)"},"defaultValue":null},{"name":"useNative","type":{"name":"boolean"},"description":{"text":"Should use a more native touchable opacity component"},"defaultValue":null},{"name":"customValue","type":{"name":"any"},"description":{"text":"Custom value of any type to pass on to TouchableOpacity and receive back in onPress callback"},"defaultValue":null},{"name":"style","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"onPress","type":{"name":"(props?: TouchableOpacityProps | any) => void"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"TextField","docblock":"@description: A wrapper for TextInput component with extra functionality like floating placeholder and validations (This is an uncontrolled component)\n@modifiers: Typography\n@extends: TextInput\n@extendsLink: https://reactnative.dev/docs/textinput\n@gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/BasicTextFieldScreen.js","description":{"text":"@description: A wrapper for TextInput component with extra functionality like floating placeholder and validations (This is an uncontrolled component)\n@modifiers: Typography\n@extends: TextInput\n@extendsLink: https://reactnative.dev/docs/textinput\n@gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/BasicTextFieldScreen.js"},"props":[{"name":"floatingPlaceholder","type":{"name":"bool"},"description":{"text":"should placeholder have floating behavior"},"defaultValue":null},{"name":"floatingPlaceholderColor","type":{"name":"union"},"description":{"text":"floating placeholder color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}"},"defaultValue":null},{"name":"floatingPlaceholderStyle","type":{"name":"union"},"description":{"text":"Custom style for floating placeholder"},"defaultValue":null},{"name":"helperText","type":{"name":"string"},"description":{"text":"This text will appear as a placeholder when the textInput becomes focused, only when passing floatingPlaceholder\nas well (NOT for expandable textInputs)"},"defaultValue":null},{"name":"hideUnderline","type":{"name":"bool"},"description":{"text":"hide text input underline, by default false"},"defaultValue":null},{"name":"underlineColor","type":{"name":"union"},"description":{"text":"underline color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}"},"defaultValue":null},{"name":"disabledColor","type":{"name":"string"},"description":{"text":"the color of all text when the input is disabled (if undefined will not apply color)"},"defaultValue":null},{"name":"centered","type":{"name":"bool"},"description":{"text":"should text input be align to center"},"defaultValue":null},{"name":"error","type":{"name":"string"},"description":{"text":"input error message, should be empty if no error exists"},"defaultValue":null},{"name":"enableErrors","type":{"name":"bool"},"description":{"text":"should the input component support error messages"},"defaultValue":{"value":"true"}},{"name":"errorColor","type":{"name":"string"},"description":{"text":"input error message's text color"},"defaultValue":null},{"name":"expandable","type":{"name":"bool"},"description":{"text":"should the input expand to another text area modal"},"defaultValue":null},{"name":"renderExpandableInput","type":{"name":"elementType"},"description":{"text":"Render custom expandable input (requires expandable to be true)"},"defaultValue":null},{"name":"renderExpandable","type":{"name":"elementType"},"description":{"text":"allow custom rendering of expandable content when clicking on the input (useful for pickers)\naccept props and state as params, ex. (props, state) => {...}\nuse toggleExpandableModal(false) method to toggle off the expandable content"},"defaultValue":null},{"name":"onToggleExpandableModal","type":{"name":"func"},"description":{"text":"Callback for the modal toggle. Pass with renderExpandable to control the modal toggle"},"defaultValue":null},{"name":"topBarProps","type":{"name":"shape"},"description":{"text":"The picker modal top bar props"},"defaultValue":null},{"name":"transformer","type":{"name":"func"},"description":{"text":"transform function executed on value and return transformed value"},"defaultValue":null},{"name":"prefix","type":{"name":"string"},"description":{"text":"Pass to render a prefix text as part of the input (doesn't work with floatingPlaceholder)"},"defaultValue":null},{"name":"prefixStyle","type":{"name":"union"},"description":{"text":"The prefix style"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"Fixed title that will displayed above the input (note: floatingPlaceholder MUST be 'false')"},"defaultValue":null},{"name":"titleColor","type":{"name":"union"},"description":{"text":"The title's color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}"},"defaultValue":null},{"name":"titleStyle","type":{"name":"union"},"description":{"text":"Additional styles for the title (not including 'color')"},"defaultValue":null},{"name":"showCharacterCounter","type":{"name":"bool"},"description":{"text":"should the input display a character counter (only when passing 'maxLength')"},"defaultValue":null},{"name":"floatOnFocus","type":{"name":"bool"},"description":{"text":"should float the placeholder when focused (instead of when typing)"},"defaultValue":null},{"name":"useTopErrors","type":{"name":"bool"},"description":{"text":"should the errors be displayed at the top"},"defaultValue":null},{"name":"rightIconSource","type":{"name":"union"},"description":{"text":"Icon asset source for showing on the right side, appropriate for dropdown icon and such"},"defaultValue":null},{"name":"rightIconStyle","type":{"name":"union"},"description":{"text":"Pass to style the right icon source"},"defaultValue":null},{"name":"rightButtonProps","type":{"name":"shape"},"description":{"text":"Props for the right button {iconSource, onPress, style}"},"defaultValue":null},{"name":"leadingIcon","type":{"name":"shape"},"description":{"text":"Pass to render a leading icon to the TextInput value. Accepts Image props (doesn't work with floatingPlaceholder)"},"defaultValue":null},{"name":"validateOnBlur","type":null,"description":{"text":""},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"Text","docblock":"@description: A wrapper for Text component with extra functionality like modifiers support\n@extends: Text\n@extendsLink: https://reactnative.dev/docs/text\n@modifiers: margins, color, typography\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextScreen.js\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Modifiers.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Transformation.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Highlights.png?raw=true","description":{"text":"@description: A wrapper for Text component with extra functionality like modifiers support\n@extends: Text\n@extendsLink: https://reactnative.dev/docs/text\n@modifiers: margins, color, typography\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextScreen.js\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Modifiers.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Transformation.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Text/Highlights.png?raw=true"},"props":[{"name":"color","type":{"name":"string"},"description":{"text":"color of the text"},"defaultValue":null},{"name":"center","type":{"name":"boolean"},"description":{"text":"whether to center the text (using textAlign)"},"defaultValue":null},{"name":"uppercase","type":{"name":"boolean"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"highlightString","type":{"name":"union"},"description":{"text":"Substring to highlight"},"defaultValue":null},{"name":"highlightStyle","type":{"name":"TextStyle"},"description":{"text":"Custom highlight style for highlight string"},"defaultValue":null},{"name":"animated","type":{"name":"boolean"},"description":{"text":"Use Animated.Text as a container"},"defaultValue":null},{"name":"textAlign","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<TextStyle | Animated.AnimatedProps<TextStyle>>"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"PageCarousel","docblock":"@description: TabController's Page Carousel\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n@notes: You must pass `asCarousel` flag to TabController and render your TabPages inside a PageCarousel","description":{"text":"@description: TabController's Page Carousel\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n@notes: You must pass `asCarousel` flag to TabController and render your TabPages inside a PageCarousel"},"props":[]}},{"node":{"displayName":"TabBarItem","docblock":"@description: TabController's TabBarItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n@notes: Must be rendered as a direct child of TabController.TabBar.","description":{"text":"@description: TabController's TabBarItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n@notes: Must be rendered as a direct child of TabController.TabBar."},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"label of the tab"},"defaultValue":null},{"name":"labelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"custom label style"},"defaultValue":null},{"name":"selectedLabelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"custom selected label style"},"defaultValue":null},{"name":"labelColor","type":{"name":"string"},"description":{"text":"the default label color"},"defaultValue":null},{"name":"selectedLabelColor","type":{"name":"string"},"description":{"text":"the selected label color"},"defaultValue":null},{"name":"icon","type":{"name":"number"},"description":{"text":"icon of the tab"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"badge","type":{"name":"BadgeProps"},"description":{"text":"Badge component props to display next the item label"},"defaultValue":null},{"name":"leadingAccessory","type":{"name":"ReactElement"},"description":{"text":"Pass to render a leading element"},"defaultValue":null},{"name":"trailingAccessory","type":{"name":"ReactElement"},"description":{"text":"Pass to render a trailing element"},"defaultValue":null},{"name":"width","type":{"name":"number"},"description":{"text":"A fixed width for the item"},"defaultValue":null},{"name":"ignore","type":{"name":"boolean"},"description":{"text":"ignore of the tab"},"defaultValue":null},{"name":"onPress","type":{"name":"(index: number) => void"},"description":{"text":"callback for when pressing a tab"},"defaultValue":null},{"name":"uppercase","type":{"name":"boolean"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"activeOpacity","type":{"name":"number"},"description":{"text":"The active opacity when pressing a tab"},"defaultValue":{"value":"0.9"}},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"TODO: rename to feedbackColor\nApply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Pass custom style"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as a testing identifier"},"defaultValue":null},{"name":"index","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"targetPage","type":{"name":"any"},"description":{"text":""},"defaultValue":null},{"name":"currentPage","type":{"name":"Reanimated.Adaptable<number>"},"description":{"text":""},"defaultValue":null},{"name":"onLayout","type":{"name":"(event: LayoutChangeEvent, index: number) => void"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"TabController.TabBar","docblock":"@description: TabController's TabBar component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx","description":{"text":"@description: TabController's TabBar component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx"},"props":[{"name":"items","type":{"name":"TabControllerItemProps[]"},"description":{"text":"The list of tab bar items"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"Tab Bar height"},"defaultValue":null},{"name":"enableShadow","type":{"name":"boolean"},"description":{"text":"Show Tab Bar bottom shadow"},"defaultValue":null},{"name":"shadowStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"custom shadow style"},"defaultValue":null},{"name":"indicatorStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"custom style for the selected indicator"},"defaultValue":null},{"name":"labelStyle","type":{"name":"TabControllerItemProps['labelStyle']"},"description":{"text":"custom label style"},"defaultValue":{"value":"{\n  ...Typography.text80M,\n  letterSpacing: 0\n}"}},{"name":"selectedLabelStyle","type":{"name":"TabControllerItemProps['selectedLabelStyle']"},"description":{"text":"custom selected label style"},"defaultValue":{"value":"{\n  ...Typography.text80M,\n  letterSpacing: 0\n}"}},{"name":"labelColor","type":{"name":"string"},"description":{"text":"the default label color"},"defaultValue":null},{"name":"selectedLabelColor","type":{"name":"string"},"description":{"text":"the selected label color"},"defaultValue":null},{"name":"uppercase","type":{"name":"boolean"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"TODO: rename to feedbackColor\nApply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"The TabBar background Color"},"defaultValue":{"value":"Colors.white"}},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The TabBar container width"},"defaultValue":null},{"name":"centerSelected","type":{"name":"boolean"},"description":{"text":"Pass to center selected item"},"defaultValue":null},{"name":"spreadItems","type":{"name":"boolean"},"description":{"text":"Whether the tabBar should be spread (default: true)"},"defaultValue":{"value":"true"}},{"name":"indicatorInsets","type":{"name":"number"},"description":{"text":"The indicator insets (default: Spacings.s4, set to 0 to make it wide as the item)"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styles for the container"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as a testing identifier"},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"TabPage","docblock":"@description: TabController's TabPage\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx","description":{"text":"@description: TabController's TabPage\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx"},"props":[]}},{"node":{"displayName":"TabController","docblock":"@description: A performant solution for a tab controller with lazy load mechanism\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n@notes: This component is based on react-native-gesture-handler\n@important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation","description":{"text":"@description: A performant solution for a tab controller with lazy load mechanism\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabControllerScreen/index.tsx\n@notes: This component is based on react-native-gesture-handler\n@important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation"},"props":[{"name":"initialIndex","type":null,"description":{"text":""},"defaultValue":{"value":"0"}},{"name":"asCarousel","type":null,"description":{"text":""},"defaultValue":{"value":"false"}},{"name":"onChangeIndex","type":null,"description":{"text":""},"defaultValue":{"value":"_.noop"}}]}},{"node":{"displayName":"TabBar.Item","docblock":"@description: TabBar.Item, inner component of TabBar for configuring the tabs\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n@extends: TouchableOpacity\n@extendsLink: https://reactnative.dev/docs/touchableopacity","description":{"text":"@description: TabBar.Item, inner component of TabBar for configuring the tabs\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n@extends: TouchableOpacity\n@extendsLink: https://reactnative.dev/docs/touchableopacity"},"props":[{"name":"icon","type":{"name":"number"},"description":{"text":"icon of the tab"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"iconSelectedColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"label of the tab"},"defaultValue":null},{"name":"labelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"custom label style"},"defaultValue":null},{"name":"badgeProps","type":{"name":"BadgeProps"},"description":{"text":"Badge component's props to display next the item label"},"defaultValue":null},{"name":"leadingAccessory","type":{"name":"ReactElement"},"description":{"text":"Pass to render a leading element"},"defaultValue":null},{"name":"trailingAccessory","type":{"name":"ReactElement"},"description":{"text":"Pass to render a trailing element"},"defaultValue":null},{"name":"maxLines","type":{"name":"number"},"description":{"text":"maximum number of lines the label can break"},"defaultValue":{"value":"1"}},{"name":"selectedLabelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"custom selected tab label style"},"defaultValue":null},{"name":"selected","type":{"name":"boolean"},"description":{"text":"whether the tab is selected or not"},"defaultValue":null},{"name":"showDivider","type":{"name":"boolean"},"description":{"text":"whether the tab will have a divider on its right"},"defaultValue":null},{"name":"width","type":{"name":"number"},"description":{"text":"A fixed width for the item"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"tabBar's background color"},"defaultValue":null},{"name":"ignore","type":{"name":"boolean"},"description":{"text":"ignore of the tab"},"defaultValue":null},{"name":"onPress","type":{"name":"() => void"},"description":{"text":"callback for when pressing a tab"},"defaultValue":null},{"name":"uppercase","type":{"name":"boolean"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"Apply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"accessibilityLabel","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"indicatorStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"TabBar","docblock":"@description: TabBar Component\n@modifiers: alignment, flex, padding, margin, background, typography, color (list of supported modifiers)\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n@extends: ScrollBar\n@notes: This is screen width component.","description":{"text":"@description: TabBar Component\n@modifiers: alignment, flex, padding, margin, background, typography, color (list of supported modifiers)\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TabBarScreen.tsx\n@extends: ScrollBar\n@notes: This is screen width component."},"props":[{"name":"enableShadow","type":{"name":"boolean"},"description":{"text":"Show Tab Bar bottom shadow"},"defaultValue":null},{"name":"minTabsForScroll","type":{"name":"number"},"description":{"text":"The minimum number of tabs to render in scroll mode"},"defaultValue":null},{"name":"selectedIndex","type":{"name":"number"},"description":{"text":"current selected tab index"},"defaultValue":{"value":"0"}},{"name":"onChangeIndex","type":{"name":"(index: number) => void"},"description":{"text":"callback for when index has change (will not be called on ignored items)"},"defaultValue":null},{"name":"onTabSelected","type":{"name":"(index: number) => void"},"description":{"text":"callback for when tab selected"},"defaultValue":null},{"name":"indicatorStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"custom style for the selected indicator"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"Tab Bar height"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"Pass when container width is different than the screen width"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"The background color"},"defaultValue":null},{"name":"darkTheme","type":{"name":"boolean"},"description":{"text":"set darkTheme style"},"defaultValue":null},{"name":"children","type":{"name":"React.ReactNode"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"items","type":{"name":"array"},"description":{"text":"Array of items as objects {value, label}"},"defaultValue":null},{"name":"selectedValue","type":{"name":"union"},"description":{"text":"The selected value"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"The component's title"},"defaultValue":null},{"name":"wheelPickerProps","type":{"name":"shape"},"description":{"text":"Pass props for the WheelPicker (Android only)"},"defaultValue":null},{"name":"selectLabelStyle","type":{"name":"custom"},"description":{"text":"select label style"},"defaultValue":null},{"name":"cancelLabelStyle","type":{"name":"custom"},"description":{"text":"cancel label style"},"defaultValue":null},{"name":"onCancel","type":{"name":"func"},"description":{"text":"onCancel callback invoked when 'Cancel' button is pressed"},"defaultValue":null},{"name":"onSelect","type":{"name":"func"},"description":{"text":"onSelect callback invoked when 'Ok' button is pressed"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"onValueChange callback invoked when the value in the wheel changes"},"defaultValue":null}]}},{"node":{"displayName":"TextArea","docblock":"@description: a wrapper for Text Field component to create enclosed text area\n@modifiers: Typography\n@extends: TextField\n@extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/textField/index.js\n@gif: https://media.giphy.com/media/3oFzmoU8TdfHeYZNZu/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js","description":{"text":"@description: a wrapper for Text Field component to create enclosed text area\n@modifiers: Typography\n@extends: TextField\n@extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/textField/index.js\n@gif: https://media.giphy.com/media/3oFzmoU8TdfHeYZNZu/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js"},"props":[]}},{"node":{"displayName":"Switch","docblock":"@description: Switch component for toggling boolean value related to some context\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SwitchScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Switch/Switch.gif?raw=true","description":{"text":"@description: Switch component for toggling boolean value related to some context\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SwitchScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Switch/Switch.gif?raw=true"},"props":[{"name":"value","type":{"name":"boolean"},"description":{"text":"The value of the switch. If true the switch will be turned on. Default value is false"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: boolean) => void"},"description":{"text":"Invoked with the new value when the value changes"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"Whether the switch should be disabled"},"defaultValue":null},{"name":"width","type":{"name":"number"},"description":{"text":"The Switch width"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"The Switch height"},"defaultValue":null},{"name":"onColor","type":{"name":"ColorValue"},"description":{"text":"The Switch background color when it's turned on"},"defaultValue":null},{"name":"offColor","type":{"name":"ColorValue"},"description":{"text":"The Switch background color when it's turned off"},"defaultValue":null},{"name":"disabledColor","type":{"name":"ColorValue"},"description":{"text":"The Switch background color when it's disabled"},"defaultValue":null},{"name":"thumbColor","type":{"name":"ColorValue"},"description":{"text":"The Switch's thumb color"},"defaultValue":null},{"name":"thumbSize","type":{"name":"number"},"description":{"text":"The Switch's thumb size (width & height)"},"defaultValue":null},{"name":"thumbStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The Switch's thumb style"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Toast","docblock":"@description: A toast component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ToastsScreen.js\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Toast/Toast.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Toast/ToastAttachment.gif?raw=true","description":{"text":"@description: A toast component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ToastsScreen.js\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Toast/Toast.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Toast/ToastAttachment.gif?raw=true"},"props":[{"name":"visible","type":{"name":"bool"},"description":{"text":"Whether to show or hide the toast"},"defaultValue":null},{"name":"position","type":{"name":"enum"},"description":{"text":"The position of the toast. 'top' or 'bottom'."},"defaultValue":{"value":"'top'"}},{"name":"zIndex","type":{"name":"number"},"description":{"text":"custom zIndex for toast"},"defaultValue":{"value":"100"}},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"The background color of the toast"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"the toast content color (message, actions labels)"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"the toast message"},"defaultValue":null},{"name":"centerMessage","type":{"name":"bool"},"description":{"text":"should message be centered in the toast"},"defaultValue":null},{"name":"icon","type":{"name":"union"},"description":{"text":"a left icon"},"defaultValue":null},{"name":"action","type":{"name":"shape"},"description":{"text":"a single action for the user"},"defaultValue":null},{"name":"showLoader","type":{"name":"bool"},"description":{"text":"should show a loader (showDismiss must be false)"},"defaultValue":null},{"name":"onDismiss","type":{"name":"func"},"description":{"text":"callback for dismiss action"},"defaultValue":null},{"name":"autoDismiss","type":{"name":"number"},"description":{"text":"number of milliseconds to automatically invoke the onDismiss callback"},"defaultValue":null},{"name":"showDismiss","type":{"name":"bool"},"description":{"text":"show dismiss action (right 'X' button)"},"defaultValue":null},{"name":"onAnimationEnd","type":{"name":"func"},"description":{"text":"callback for end of component animation"},"defaultValue":null},{"name":"renderAttachment","type":{"name":"elementType"},"description":{"text":"render a custom view that will appear permanently above or below a Toast,\ndepends on the Toast's position, and animate with it when the Toast is made visible or dismissed"},"defaultValue":null},{"name":"customLoader","type":{"name":"func"},"description":{"text":"render a custom loader component instead of the default when passing showLoader"},"defaultValue":null}]}},{"node":{"displayName":"StateScreen","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"StateScreen","docblock":"@description: Component that shows a full screen for a certain state, like an empty state\n@image: https://user-images.githubusercontent.com/33805983/34672894-f262ab84-f488-11e7-83f0-4ee0f0ac34ba.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/EmptyStateScreen.tsx","description":{"text":"@description: Component that shows a full screen for a certain state, like an empty state\n@image: https://user-images.githubusercontent.com/33805983/34672894-f262ab84-f488-11e7-83f0-4ee0f0ac34ba.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/EmptyStateScreen.tsx"},"props":[{"name":"imageSource","type":{"name":"ImageURISource"},"description":{"text":"The image source that's showing at the top. use an image that was required locally"},"defaultValue":null},{"name":"source","type":{"name":"ImageURISource"},"description":{"text":""},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"To to show as the title"},"defaultValue":null},{"name":"subtitle","type":{"name":"union"},"description":{"text":"Text to to show as the subtitle"},"defaultValue":null},{"name":"ctaLabel","type":{"name":"string"},"description":{"text":"Text to to show in the \"call to action\" button"},"defaultValue":null},{"name":"onCtaPress","type":{"name":"() => void"},"description":{"text":"Action handler for \"call to action\" button"},"defaultValue":null},{"name":"testId","type":{"name":"string"},"description":{"text":"Use to identify the container in tests"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Stepper","docblock":"@description: A stepper component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StepperScreen.js","description":{"text":"@description: A stepper component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StepperScreen.js"},"props":[{"name":"value","type":{"name":"number"},"description":{"text":"Initial value of the Stepper."},"defaultValue":null},{"name":"minValue","type":{"name":"number"},"description":{"text":"Minimum value."},"defaultValue":null},{"name":"maxValue","type":{"name":"number"},"description":{"text":"Maximum value."},"defaultValue":null},{"name":"step","type":{"name":"number"},"description":{"text":"The step to increase and decrease by (default is 1)"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: number, testID?: string) => void"},"description":{"text":"On value change callback function"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"disables interaction with the stepper"},"defaultValue":null},{"name":"small","type":{"name":"boolean"},"description":{"text":"Renders a small sized Stepper"},"defaultValue":null},{"name":"accessibilityLabel","type":{"name":"string"},"description":{"text":"Component accessibility label"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Test id for component"},"defaultValue":null}]}},{"node":{"displayName":"StackAggregator","docblock":"@description: Stack aggregator component\n@modifiers: margin, padding\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StackAggregatorScreen.tsx","description":{"text":"@description: Stack aggregator component\n@modifiers: margin, padding\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StackAggregatorScreen.tsx"},"props":[{"name":"collapsed","type":{"name":"boolean"},"description":{"text":"The initial state of the stack"},"defaultValue":{"value":"true"}},{"name":"children","type":{"name":"union"},"description":{"text":"Component Children"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The container style"},"defaultValue":null},{"name":"contentContainerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The content container style"},"defaultValue":null},{"name":"itemBorderRadius","type":{"name":"number"},"description":{"text":"The items border radius"},"defaultValue":{"value":"0"}},{"name":"buttonProps","type":{"name":"ButtonProps"},"description":{"text":"Props passed to the 'show less' button"},"defaultValue":null},{"name":"onItemPress","type":{"name":"(index: number) => void"},"description":{"text":"A callback for item press"},"defaultValue":null},{"name":"onCollapseWillChange","type":{"name":"(changed: boolean) => void"},"description":{"text":"A callback for collapse state will change (value is future collapsed state)"},"defaultValue":null},{"name":"onCollapseChanged","type":{"name":"(changed: boolean) => void"},"description":{"text":"A callback for collapse state change (value is collapsed state)"},"defaultValue":null},{"name":"disablePresses","type":{"name":"boolean"},"description":{"text":"A setting that disables pressability on cards"},"defaultValue":{"value":"false"}}]}},{"node":{"displayName":"ColorSliderGroup","docblock":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorSliderGroup/ColorSliderGroup.gif?raw=true","description":{"text":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorSliderGroup/ColorSliderGroup.gif?raw=true"},"props":[{"name":"initialColor","type":{"name":"string"},"description":{"text":"The gradient color"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: string) => void"},"description":{"text":"Callback for onValueChange returns the new hex color"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Group container style"},"defaultValue":null},{"name":"sliderContainerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Sliders style"},"defaultValue":null},{"name":"showLabels","type":{"name":"boolean"},"description":{"text":"Show the sliders labels (defaults are: Hue, Lightness, Saturation)"},"defaultValue":null},{"name":"labels","type":{"name":"{[key in GradientSliderTypes]: string}"},"description":{"text":"In case you would like to change the default labels (translations etc.), you can provide\nthis prop with a map to the relevant labels ({hue: ..., lightness: ..., saturation: ...})."},"defaultValue":{"value":"{hue: 'Hue', lightness: 'Lightness', saturation: 'Saturation'}"}},{"name":"labelsStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"The labels style"},"defaultValue":null},{"name":"accessible","type":{"name":"boolean"},"description":{"text":"If true the component will have accessibility features enabled"},"defaultValue":null}]}},{"node":{"displayName":"GradientSlider","docblock":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/GradientSlider/GradientSlider.gif?raw=true","description":{"text":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/GradientSlider/GradientSlider.gif?raw=true"},"props":[{"name":"sliderContext","type":{"name":"SliderContextProps"},"description":{"text":"Context of the slider group"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The gradient color"},"defaultValue":{"value":"Colors.blue30"}},{"name":"type","type":{"name":"GradientSliderTypes"},"description":{"text":"The gradient type (default, hue, lightness, saturation)"},"defaultValue":{"value":"GradientSliderTypes.DEFAULT"}},{"name":"gradientSteps","type":{"name":"number"},"description":{"text":"The gradient steps"},"defaultValue":{"value":"120"}},{"name":"onValueChange","type":{"name":"(value: string, alfa: number) => void"},"description":{"text":"Callback for onValueChange, returns the updated color"},"defaultValue":null},{"name":"accessible","type":{"name":"boolean"},"description":{"text":"If true the component will have accessibility features enabled"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The container style"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"If true the Slider will be disabled and will appear in disabled color"},"defaultValue":null}]}},{"node":{"displayName":"Slider","docblock":"@description: A Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Slider/Slider.gif?raw=true","description":{"text":"@description: A Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Slider/Slider.gif?raw=true"},"props":[{"name":"value","type":{"name":"number"},"description":{"text":"Initial value"},"defaultValue":{"value":"0"}},{"name":"minimumValue","type":{"name":"number"},"description":{"text":"Minimum value"},"defaultValue":{"value":"0"}},{"name":"maximumValue","type":{"name":"number"},"description":{"text":"Maximum value"},"defaultValue":{"value":"1"}},{"name":"step","type":{"name":"number"},"description":{"text":"Step value of the slider. The value should be between 0 and (maximumValue - minimumValue)"},"defaultValue":{"value":"0"}},{"name":"minimumTrackTintColor","type":{"name":"string"},"description":{"text":"The color used for the track from minimum value to current value"},"defaultValue":null},{"name":"maximumTrackTintColor","type":{"name":"string"},"description":{"text":"The track color"},"defaultValue":null},{"name":"renderTrack","type":{"name":"() => ReactElement | ReactElement[]"},"description":{"text":"Custom render instead of rendering the track"},"defaultValue":null},{"name":"thumbTintColor","type":{"name":"string"},"description":{"text":"Thumb color"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: number) => void"},"description":{"text":"Callback for onValueChange"},"defaultValue":null},{"name":"onSeekStart","type":{"name":"() => void"},"description":{"text":"Callback that notifies about slider seeking is started"},"defaultValue":null},{"name":"onSeekEnd","type":{"name":"() => void"},"description":{"text":"Callback that notifies about slider seeking is finished"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The container style"},"defaultValue":null},{"name":"trackStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The track style"},"defaultValue":null},{"name":"thumbStyle","type":{"name":"ViewStyle"},"description":{"text":"The thumb style"},"defaultValue":null},{"name":"activeThumbStyle","type":{"name":"ViewStyle"},"description":{"text":"The active (during press) thumb style"},"defaultValue":null},{"name":"disableActiveStyling","type":{"name":"boolean"},"description":{"text":"If true the Slider will not change it's style on press"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"If true the Slider will be disabled and will appear in disabled color"},"defaultValue":null},{"name":"accessible","type":{"name":"boolean"},"description":{"text":"If true the component will have accessibility features enabled"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"The slider's test identifier"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"color","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"onValueChange","type":{"name":"(color: string) => void"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"data","type":{"name":"object"},"description":{"text":"Data to share between shared element and placeholder"},"defaultValue":null}]}},{"node":{"displayName":"SkeletonView","docblock":"@description: Allows showing a temporary skeleton view while your real view is loading.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SkeletonViewScreen.tsx\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Skeleton/Skeleton.gif?raw=true\n@notes: View requires installing the 'react-native-shimmer-placeholder' and 'react-native-linear-gradient' library","description":{"text":"@description: Allows showing a temporary skeleton view while your real view is loading.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SkeletonViewScreen.tsx\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Skeleton/Skeleton.gif?raw=true\n@notes: View requires installing the 'react-native-shimmer-placeholder' and 'react-native-linear-gradient' library"},"props":[{"name":"showContent","type":{"name":"boolean"},"description":{"text":"The content has been loaded, start fading out the skeleton and fading in the content"},"defaultValue":null},{"name":"contentData","type":{"name":"any"},"description":{"text":"Custom value of any type to pass on to SkeletonView and receive back in the renderContent callback"},"defaultValue":null},{"name":"renderContent","type":{"name":"(contentData?: any) => React.ReactNode"},"description":{"text":"A function that will render the content once the content is ready (i.e. showContent is true).\nThe method will be called with the Skeleton's contentData (i.e. renderContent(props?.contentData))"},"defaultValue":null},{"name":"template","type":{"name":"Template"},"description":{"text":"The type of the skeleton view.\nTypes: LIST_ITEM and TEXT_CONTENT (using SkeletonView.templates.###)"},"defaultValue":null},{"name":"times","type":{"name":"number"},"description":{"text":"An object that holds the number of times the skeleton will appear, and (optionally) the key.\nThe key will actually be `${key}-${index}` if a key is given or `${index}` if no key is given.\nIMPORTANT: your data (i.e. children \\ renderContent) will NOT be duplicated.\nNote: testID will be `${testID}-${index}`"},"defaultValue":null},{"name":"timesKey","type":{"name":"string"},"description":{"text":"A key for the duplicated SkeletonViews.\nThis is needed because the `key` prop is not accessible."},"defaultValue":null},{"name":"size","type":{"name":"Size"},"description":{"text":"The size of the skeleton view.\nTypes: SMALL and LARGE (using SkeletonView.sizes.###)"},"defaultValue":{"value":"Size.SMALL"}},{"name":"contentType","type":{"name":"ContentType"},"description":{"text":"Add content to the skeleton.\nTypes: AVATAR and THUMBNAIL (using SkeletonView.contentTypes.###)"},"defaultValue":null},{"name":"hideSeparator","type":{"name":"boolean"},"description":{"text":"Whether to hide the list item template separator"},"defaultValue":null},{"name":"showLastSeparator","type":{"name":"boolean"},"description":{"text":"Whether to show the last list item template separator"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"The height of the skeleton view"},"defaultValue":null},{"name":"width","type":{"name":"number"},"description":{"text":"The width of the skeleton view"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The border radius of the skeleton view"},"defaultValue":{"value":"BorderRadiuses.br10"}},{"name":"circle","type":{"name":"boolean"},"description":{"text":"Whether the skeleton is a circle (will override the borderRadius)"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Override container styles"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used to locate this view in end-to-end tests"},"defaultValue":null}]}},{"node":{"displayName":"SegmentedControl","docblock":"@description: SegmentedControl component for toggling two values or more\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SegmentedControlScreen.tsx","description":{"text":"@description: SegmentedControl component for toggling two values or more\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SegmentedControlScreen.tsx"},"props":[{"name":"segments","type":{"name":"SegmentedControlItemProps[]"},"description":{"text":"Array on segments."},"defaultValue":null},{"name":"activeColor","type":{"name":"string"},"description":{"text":"The color of the active segment label."},"defaultValue":null},{"name":"inactiveColor","type":{"name":"string"},"description":{"text":"The color of the inactive segments (label)."},"defaultValue":null},{"name":"onChangeIndex","type":{"name":"(index: number) => void"},"description":{"text":"Callback for when index has change."},"defaultValue":null},{"name":"initialIndex","type":{"name":"number"},"description":{"text":"Initial index to be active."},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The segmentedControl borderRadius"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"The background color of the inactive segments"},"defaultValue":null},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"The background color of the active segment"},"defaultValue":null},{"name":"outlineColor","type":{"name":"string"},"description":{"text":"The color of the active segment outline"},"defaultValue":null},{"name":"outlineWidth","type":{"name":"number"},"description":{"text":"The width of the active segment outline"},"defaultValue":null},{"name":"iconOnRight","type":{"name":"boolean"},"description":{"text":"Should the icon be on right of the label"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional spacing styles for the container"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"SectionsWheelPicker","docblock":"@description: SectionsWheelPicker component for presenting set of wheelPickers\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SectionsWheelPickerScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/SectionsWheelPicker/SectionsWheelPicker.gif?raw=true","description":{"text":"@description: SectionsWheelPicker component for presenting set of wheelPickers\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SectionsWheelPickerScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/SectionsWheelPicker/SectionsWheelPicker.gif?raw=true"},"props":[{"name":"sections","type":{"name":"WheelPickerProps[]"},"description":{"text":"Array of sections."},"defaultValue":null},{"name":"itemHeight","type":{"name":"number"},"description":{"text":"Describe the height of each item in the WheelPicker\ndefault value: 44"},"defaultValue":null},{"name":"numberOfVisibleRows","type":{"name":"number"},"description":{"text":"Describe the number of rows visible\ndefault value: 5"},"defaultValue":null},{"name":"activeTextColor","type":{"name":"string"},"description":{"text":"Text color for the focused row"},"defaultValue":null},{"name":"inactiveTextColor","type":{"name":"string"},"description":{"text":"Text color for other, non-focused rows"},"defaultValue":null},{"name":"textStyle","type":{"name":"TextStyle"},"description":{"text":"Row text style"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Segment","docblock":"Segment sub-component for SegmentedControl component","description":{"text":"Segment sub-component for SegmentedControl component"},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"The label of the segment."},"defaultValue":null},{"name":"iconSource","type":{"name":"ImageSourcePropType"},"description":{"text":"An icon for the segment."},"defaultValue":null},{"name":"iconStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"An icon for the segment."},"defaultValue":null},{"name":"iconOnRight","type":{"name":"boolean"},"description":{"text":"Should the icon be on right of the label"},"defaultValue":null},{"name":"isSelected","type":{"name":"boolean"},"description":{"text":"Is the item selected."},"defaultValue":null},{"name":"activeColor","type":{"name":"string"},"description":{"text":"The color of the active segment (label and outline)."},"defaultValue":null},{"name":"inactiveColor","type":{"name":"string"},"description":{"text":"The color of the inactive segment (label)."},"defaultValue":null},{"name":"onPress","type":{"name":"(index: number) => void"},"description":{"text":"Callback for when segment has pressed."},"defaultValue":null},{"name":"index","type":{"name":"number"},"description":{"text":"The index of the segment."},"defaultValue":null},{"name":"onLayout","type":{"name":"(index: number, event: LayoutChangeEvent) => void"},"description":{"text":"onLayout function."},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"renderDetails","type":{"name":"elementType"},"description":{"text":"render details screen"},"defaultValue":{"value":"_.noop"}}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Is the gradient visible"},"defaultValue":null},{"name":"left","type":{"name":"boolean"},"description":{"text":"Should the gradient be on the left (reverse)"},"defaultValue":null},{"name":"gradientWidth","type":{"name":"number"},"description":{"text":"The gradient's width (default is 76)"},"defaultValue":{"value":"76"}},{"name":"gradientHeight","type":{"name":"number"},"description":{"text":"The gradient's height (default 100%)"},"defaultValue":null},{"name":"gradientMargins","type":{"name":"number"},"description":{"text":"The gradient's margins (default is 0)"},"defaultValue":{"value":"0"}},{"name":"height","type":{"name":"number"},"description":{"text":"The gradient's height (default 100%)"},"defaultValue":null},{"name":"gradientColor","type":{"name":"string"},"description":{"text":"The gradient's color (default is white)"},"defaultValue":{"value":"Colors.white"}},{"name":"gradientImage","type":{"name":"ImageSourcePropType"},"description":{"text":"Image source for the gradient (default is assets/gradientOverlay.png)"},"defaultValue":{"value":"require('./assets/gradientOverlay.png')"}}]}},{"node":{"displayName":"ScrollBar","docblock":"@description: Scrollable container with animated gradient overlay for horizontal scroll\n@extends: ScrollView / FlatList","description":{"text":"@description: Scrollable container with animated gradient overlay for horizontal scroll\n@extends: ScrollView / FlatList"},"props":[{"name":"useList","type":{"name":"boolean"},"description":{"text":"Whether to use a FlatList. NOTE: you must pass 'data' and 'renderItem' props as well"},"defaultValue":null},{"name":"containerView","type":{"name":"React.ComponentClass"},"description":{"text":"The element to use as a container, instead of a View"},"defaultValue":null},{"name":"containerProps","type":{"name":"object"},"description":{"text":"The props to pass the container"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"The component's height"},"defaultValue":null},{"name":"gradientHeight","type":{"name":"number"},"description":{"text":"The gradient's height, defaults to the component's height"},"defaultValue":null},{"name":"gradientWidth","type":{"name":"number"},"description":{"text":"The gradient's width"},"defaultValue":{"value":"76"}},{"name":"gradientMargins","type":{"name":"number"},"description":{"text":"The gradient's margins for the edge"},"defaultValue":{"value":"0"}},{"name":"gradientColor","type":{"name":"string"},"description":{"text":"The gradient's tint color"},"defaultValue":{"value":"Colors.white"}},{"name":"gradientImage","type":{"name":"ImageSourcePropType"},"description":{"text":"The gradient's image, instead of the default image.\nNOTE: pass an image for the right-hand side and it will be flipped to match the left-hand side"},"defaultValue":null},{"name":"focusIndex","type":{"name":"number"},"description":{"text":"The index to currently focus on"},"defaultValue":{"value":"0"}}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"RadioGroup","docblock":"@description: Wrap a group of Radio Buttons to automatically control their selection\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Alignment.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Custom.gif?raw=true\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Individual.png?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/RadioButtonScreen.js","description":{"text":"@description: Wrap a group of Radio Buttons to automatically control their selection\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Alignment.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Custom.gif?raw=true\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Individual.png?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/RadioButtonScreen.js"},"props":[{"name":"initialValue","type":{"name":"union"},"description":{"text":"The initial value of the selected radio button"},"defaultValue":null},{"name":"onValueChange","type":{"name":"union"},"description":{"text":"Invoked once when value changes, by selecting one of the radio buttons in the group"},"defaultValue":null}]}},{"node":{"displayName":"RadioButton","docblock":"@description: A Radio Button component, should be wrapped inside a RadioGroup\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Alignment.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Custom.gif?raw=true\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Individual.png?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/RadioButtonScreen.js","description":{"text":"@description: A Radio Button component, should be wrapped inside a RadioGroup\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Alignment.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Custom.gif?raw=true\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/RadioButton/Individual.png?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/RadioButtonScreen.js"},"props":[{"name":"value","type":{"name":"union"},"description":{"text":"The identifier value of the radio button. must be different than other RadioButtons in the same group"},"defaultValue":null},{"name":"selected","type":{"name":"boolean"},"description":{"text":"When using RadioButton without a RadioGroup, use this prop to toggle selection"},"defaultValue":null},{"name":"onPress","type":{"name":"(selected: boolean) => void"},"description":{"text":"Invoked when pressing the button"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"Whether the radio button should be disabled"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The color of the radio button"},"defaultValue":null},{"name":"size","type":{"name":"number"},"description":{"text":"The size of the radio button, affect both width & height"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The radio button border radius"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"A label for the radio button description"},"defaultValue":null},{"name":"labelStyle","type":{"name":"TextStyle"},"description":{"text":"Label style"},"defaultValue":null},{"name":"iconSource","type":{"name":"ImageSourcePropType"},"description":{"text":"Icon image source"},"defaultValue":null},{"name":"iconStyle","type":{"name":"ImageStyle"},"description":{"text":"Icon image style"},"defaultValue":null},{"name":"iconOnRight","type":{"name":"boolean"},"description":{"text":"Should the icon be on the right side of the label"},"defaultValue":{"value":"false"}},{"name":"contentOnRight","type":{"name":"boolean"},"description":{"text":"Should the content be rendered right to the button"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling for the container"},"defaultValue":null}]}},{"node":{"displayName":"ProgressBar","docblock":"","description":{"text":""},"props":[{"name":"progress","type":{"name":"number"},"description":{"text":"The progress of the bar from 0 to 100"},"defaultValue":{"value":"0"}},{"name":"fullWidth","type":{"name":"boolean"},"description":{"text":"FullWidth Ui preset"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Override container style"},"defaultValue":null},{"name":"progressColor","type":{"name":"string"},"description":{"text":"Progress color"},"defaultValue":null},{"name":"customElement","type":{"name":"JSX.Element"},"description":{"text":"Custom element to render on top of the animated progress"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"onDone","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onCancel","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"array"},"description":{"text":""},"defaultValue":null},{"name":"selectLabelStyle","type":{"name":"custom"},"description":{"text":"select label style"},"defaultValue":null},{"name":"cancelLabelStyle","type":{"name":"custom"},"description":{"text":"cancel label style"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"onDone","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onCancel","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"topBarProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"array"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"topBarProps","type":{"name":"shape"},"description":{"text":""},"defaultValue":null},{"name":"scrollPosition","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"showSearch","type":{"name":"bool"},"description":{"text":""},"defaultValue":null},{"name":"searchStyle","type":{"name":"shape"},"description":{"text":""},"defaultValue":{"value":"{}"}},{"name":"searchPlaceholder","type":{"name":"string"},"description":{"text":""},"defaultValue":{"value":"'Search...'"}},{"name":"onSearchChange","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"renderCustomSearch","type":{"name":"elementType"},"description":{"text":""},"defaultValue":null},{"name":"listProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"pickerModalProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Picker.Item","docblock":"@description: Picker.Item, for configuring the Picker's selectable options\n@extends: TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js","description":{"text":"@description: Picker.Item, for configuring the Picker's selectable options\n@extends: TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js"},"props":[{"name":"value","type":{"name":"union"},"description":{"text":"Item's value"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"Item's label"},"defaultValue":null},{"name":"labelStyle","type":{"name":"custom"},"description":{"text":"Item's label style"},"defaultValue":null},{"name":"getItemLabel","type":{"name":"func"},"description":{"text":"Custom function for the item label (e.g (value) => customLabel)"},"defaultValue":null},{"name":"getItemValue","type":{"name":"func"},"description":{"text":"DEPRECATE: Function to return the value out of the item value prop when value is custom shaped."},"defaultValue":null},{"name":"isSelected","type":{"name":"bool"},"description":{"text":"Is the item selected"},"defaultValue":null},{"name":"selectedIcon","type":{"name":"union"},"description":{"text":"Pass to change the selected icon"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"Pass to change the selected icon color"},"defaultValue":null},{"name":"disabled","type":{"name":"bool"},"description":{"text":"Is the item disabled"},"defaultValue":null},{"name":"renderItem","type":{"name":"elementType"},"description":{"text":"Render custom item"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"Callback for onPress action"},"defaultValue":null},{"name":"onSelectedLayout","type":{"name":"func"},"description":{"text":"Callback for onLayout event"},"defaultValue":null}]}},{"node":{"displayName":"Picker","docblock":"@description: Picker Component, support single or multiple selection, blurModel and nativePicker\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/MultiPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/NativePicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/DialogPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/CustomPicker.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js\n@notes: 'useNativePicker' prop requires installing the '@react-native-picker/picker' native library","description":{"text":"@description: Picker Component, support single or multiple selection, blurModel and nativePicker\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/Default.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/MultiPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/NativePicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/DialogPicker.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Picker/CustomPicker.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js\n@notes: 'useNativePicker' prop requires installing the '@react-native-picker/picker' native library"},"props":[{"name":"migrate","type":{"name":"bool"},"description":{"text":"Temporary prop required for migration to Picker's new API"},"defaultValue":null},{"name":"value","type":{"name":"union"},"description":{"text":"Picker current value in the shape of {value: ..., label: ...}, for custom shape use 'getItemValue' prop"},"defaultValue":null},{"name":"onChange","type":{"name":"func"},"description":{"text":"Callback for when picker value change"},"defaultValue":null},{"name":"mode","type":{"name":"enum"},"description":{"text":"SINGLE mode or MULTI mode"},"defaultValue":{"value":"'SINGLE'"}},{"name":"selectionLimit","type":{"name":"number"},"description":{"text":"Limit the number of selected items"},"defaultValue":null},{"name":"enableModalBlur","type":{"name":"bool"},"description":{"text":"Adds blur effect to picker modal (iOS only)"},"defaultValue":null},{"name":"renderPicker","type":{"name":"elementType"},"description":{"text":"Render custom picker - input will be value (see above)\nExample:\nrenderPicker = (selectedItem) => {...}"},"defaultValue":null},{"name":"renderItem","type":{"name":"elementType"},"description":{"text":"Render custom picker item"},"defaultValue":null},{"name":"renderCustomModal","type":{"name":"elementType"},"description":{"text":"Render custom picker modal (e.g ({visible, children, toggleModal}) => {...})"},"defaultValue":null},{"name":"customPickerProps","type":{"name":"object"},"description":{"text":"Custom picker props (when using renderPicker, will apply on the button wrapper)"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"Add onPress callback for when pressing the picker"},"defaultValue":null},{"name":"getItemValue","type":{"name":"func"},"description":{"text":"A function that extract the unique value out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})"},"defaultValue":null},{"name":"getItemLabel","type":{"name":"func"},"description":{"text":"A function that extract the label out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})"},"defaultValue":null},{"name":"getLabel","type":{"name":"func"},"description":{"text":"A function that returns the label to show for the selected Picker value"},"defaultValue":null},{"name":"topBarProps","type":{"name":"shape"},"description":{"text":"The picker modal top bar props"},"defaultValue":null},{"name":"showSearch","type":{"name":"bool"},"description":{"text":"Show search input to filter picker items by label"},"defaultValue":null},{"name":"searchStyle","type":{"name":"shape"},"description":{"text":"Style object for the search input (only when passing showSearch)"},"defaultValue":null},{"name":"searchPlaceholder","type":{"name":"string"},"description":{"text":"Placeholder text for the search input (only when passing showSearch)"},"defaultValue":null},{"name":"onSearchChange","type":{"name":"func"},"description":{"text":"callback for picker modal search input text change (only when passing showSearch)"},"defaultValue":null},{"name":"renderCustomSearch","type":{"name":"elementType"},"description":{"text":"Render custom search input (only when passing showSearch)"},"defaultValue":null},{"name":"useNativePicker","type":{"name":"bool"},"description":{"text":"Allow to use the native picker solution (different style for iOS and Android)"},"defaultValue":null},{"name":"renderNativePicker","type":{"name":"elementType"},"description":{"text":"Callback for rendering a custom native picker inside the dialog (relevant to native picker only)"},"defaultValue":null},{"name":"listProps","type":{"name":"object"},"description":{"text":"Pass props to the list component that wraps the picker options (allows to control FlatList behavior)"},"defaultValue":null},{"name":"pickerModalProps","type":{"name":"object"},"description":{"text":"Pass props to the picker modal"},"defaultValue":null}]}},{"node":{"displayName":"ProgressiveImage","docblock":"@description: Image component that loads first a small thumbnail of the images, \n              and fades-in the full-sized image with animation once it's loaded\n@extends: Animated.Image \n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ProgressiveImageScreen.js","description":{"text":"@description: Image component that loads first a small thumbnail of the images, \n              and fades-in the full-sized image with animation once it's loaded\n@extends: Animated.Image \n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ProgressiveImageScreen.js"},"props":[{"name":"thumbnailSource","type":{"name":"object"},"description":{"text":"small thumbnail source to display while the full-size image is loading"},"defaultValue":null}]}},{"node":{"displayName":"PanDismissibleView","docblock":"@description: PanDismissibleView component created to making listening to swipe and drag events easier,\n@notes: Has to be used as a child of a PanningProvider that also has a PanListenerView.\n        The PanListenerView is the one that sends the drag\\swipe events.\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanDismissibleView/PanDismissibleView.gif?raw=true","description":{"text":"@description: PanDismissibleView component created to making listening to swipe and drag events easier,\n@notes: Has to be used as a child of a PanningProvider that also has a PanListenerView.\n        The PanListenerView is the one that sends the drag\\swipe events.\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanDismissibleView/PanDismissibleView.gif?raw=true"},"props":[{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling"},"defaultValue":null},{"name":"directions","type":{"name":"PanningDirections[]"},"description":{"text":"The directions of the allowed pan (default allows all directions)\nTypes: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)"},"defaultValue":{"value":"[\n  PanningProvider.Directions.UP,\n  PanningProvider.Directions.DOWN,\n  PanningProvider.Directions.LEFT,\n  PanningProvider.Directions.RIGHT\n]"}},{"name":"onDismiss","type":{"name":"() => void"},"description":{"text":"onDismiss callback"},"defaultValue":{"value":"_.noop"}},{"name":"animationOptions","type":{"name":"DismissibleAnimationProps"},"description":{"text":"Some animation options to choose from, defaults are set for:\nspeed - the animation speed (default is 20)\nbounciness - the animation bounciness (default is 6)\nduration - the dismiss animation duration (default is 280)"},"defaultValue":{"value":"{\n  speed: DEFAULT_SPEED,\n  bounciness: DEFAULT_BOUNCINESS,\n  duration: DEFAULT_DISMISS_ANIMATION_DURATION\n}"}},{"name":"threshold","type":{"name":"PanAmountsProps"},"description":{"text":"Override the default threshold (height/2 and width/2) with different values."},"defaultValue":null},{"name":"allowDiagonalDismiss","type":{"name":"boolean"},"description":{"text":"Allow diagonal dismiss, this is false by default,\nsince it looks better and most cases."},"defaultValue":{"value":"false"}},{"name":"context","type":{"name":"DismissProps"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"PanGestureView","docblock":"@description: PanGestureView component for drag and swipe gestures (supports only vertical gestures at the moment)","description":{"text":"@description: PanGestureView component for drag and swipe gestures (supports only vertical gestures at the moment)"},"props":[{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling"},"defaultValue":null},{"name":"onDismiss","type":{"name":"() => void"},"description":{"text":"onDismiss callback"},"defaultValue":null},{"name":"direction","type":{"name":"GestureDirections"},"description":{"text":"The direction of the allowed pan (default is down)"},"defaultValue":{"value":"GestureDirections.DOWN"}}]}},{"node":{"displayName":"PanListenerView","docblock":"@description: PanListenerView component created to making listening to swipe and drag events easier\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanListenerScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanListenerView/PanListenerView.gif?raw=true","description":{"text":"@description: PanListenerView component created to making listening to swipe and drag events easier\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanListenerScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanListenerView/PanListenerView.gif?raw=true"},"props":[{"name":"onDrag","type":{"name":"({directions, deltas}: ({directions: PanDirectionsProps, deltas: PanAmountsProps})) => void"},"description":{"text":"This is were you will get notified when a drag occurs\nonDrag = ({directions, deltas}) => {...}\ndirections - array of directions\ndeltas - array of deltas (same length and order as directions)\nBoth arrays will have {x, y} - if no x or y drag has occurred this value will be undefined"},"defaultValue":null},{"name":"onSwipe","type":{"name":"({directions, velocities}: ({directions: PanDirectionsProps, velocities: PanAmountsProps})) => void"},"description":{"text":"This is were you will get notified when a swipe occurs\nonSwipe = ({directions, velocities}) => {...}\ndirections - array of directions\nvelocities - array of velocities (same length and order as directions)\nBoth arrays will have {x, y} - if no x or y swipe has occurred this value will be undefined"},"defaultValue":null},{"name":"onPanStart","type":{"name":"() => void"},"description":{"text":"This is were you will get notified when the pan starts"},"defaultValue":null},{"name":"onPanRelease","type":{"name":"() => void"},"description":{"text":"This is were you will get notified when the pan ends\nThe user has released all touches while this view is the responder.\nThis typically means a gesture has succeeded"},"defaultValue":null},{"name":"onPanTerminated","type":{"name":"() => void"},"description":{"text":"This is were you will get notified when the pan ends\nAnother component has become the responder,\nso this gesture should be cancelled"},"defaultValue":null},{"name":"directions","type":{"name":"PanningDirections[]"},"description":{"text":"The directions of the allowed pan (default allows all directions)\nTypes: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)"},"defaultValue":{"value":"[\n  PanningProvider.Directions.UP,\n  PanningProvider.Directions.DOWN,\n  PanningProvider.Directions.LEFT,\n  PanningProvider.Directions.RIGHT\n]"}},{"name":"panSensitivity","type":{"name":"number"},"description":{"text":"The sensitivity beyond which a pan is no longer considered a single click (default is 5)"},"defaultValue":{"value":"5"}},{"name":"swipeVelocitySensitivity","type":{"name":"number"},"description":{"text":"The sensitivity beyond which a pan is no longer considered a drag, but a swipe (default is 1.8)\nNote: a pan would have to occur (i.e. the panSensitivity has already been surpassed)"},"defaultValue":{"value":"1.8"}},{"name":"isClickable","type":{"name":"boolean"},"description":{"text":"Is there a view that is clickable (has onPress etc.) in the PanListenerView.\nThis can affect the panability of this component."},"defaultValue":null},{"name":"context","type":{"name":"PanningProps"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"PanResponderView","docblock":"@description: panResponderView component created to making listening to swipe and drag events easier.\n@notes: Has to be used as a child of a PanningProvider that also has a PanListenerView.\n        The PanListenerView is the one that sends the drag\\swipe events.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanResponderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanResponderView/PanResponderView.gif?raw=true","description":{"text":"@description: panResponderView component created to making listening to swipe and drag events easier.\n@notes: Has to be used as a child of a PanningProvider that also has a PanListenerView.\n        The PanListenerView is the one that sends the drag\\swipe events.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanResponderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/PanResponderView/PanResponderView.gif?raw=true"},"props":[{"name":"onPanLocationChanged","type":{"name":"(location: PanLocationProps) => void"},"description":{"text":"Will be called with the current location ({left, top}) when the pan has ended"},"defaultValue":null},{"name":"ignorePanning","type":{"name":"boolean"},"description":{"text":"Ignore panning events while this is true"},"defaultValue":null},{"name":"isAnimated","type":{"name":"boolean"},"description":{"text":"Allow the view to be animated (send animation via style; default is false)"},"defaultValue":{"value":"false"}},{"name":"context","type":{"name":"PanResponderProps"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"@description: Wraps the panResponderView and panListenerView to provide a shared context","description":{"text":"@description: Wraps the panResponderView and panListenerView to provide a shared context"},"props":[]}},{"node":{"displayName":"PageControl","docblock":"@description: Page indicator, typically used in paged scroll-views\n@gif: https://user-images.githubusercontent.com/1780255/107114259-2e278d00-686d-11eb-866c-59f3d410d6c3.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PageControlScreen.tsx","description":{"text":"@description: Page indicator, typically used in paged scroll-views\n@gif: https://user-images.githubusercontent.com/1780255/107114259-2e278d00-686d-11eb-866c-59f3d410d6c3.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PageControlScreen.tsx"},"props":[{"name":"limitShownPages","type":{"name":"boolean"},"description":{"text":"Limit the number of page indicators shown.\nenlargeActive prop is disabled in this state,\nWhen set to true there will be maximum of 7 shown.\nOnly relevant when numOfPages > 5."},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styles for the top container"},"defaultValue":null},{"name":"numOfPages","type":{"name":"number"},"description":{"text":"Total number of pages"},"defaultValue":null},{"name":"currentPage","type":{"name":"number"},"description":{"text":"Zero-based index of the current page"},"defaultValue":null},{"name":"onPagePress","type":{"name":"(index: number) => void"},"description":{"text":"Action handler for clicking on a page indicator"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"Color of the selected page dot and, if inactiveColor not passed, the border of the not selected pages"},"defaultValue":null},{"name":"inactiveColor","type":{"name":"string"},"description":{"text":"Color of the unselected page dots and the border of the not selected pages"},"defaultValue":null},{"name":"size","type":{"name":"union"},"description":{"text":"The size of the page indicator.\nWhen setting limitShownPages the medium sized will be 2/3 of size and the small will be 1/3 of size.\nAn alternative is to send an array [smallSize, mediumSize, largeSize]."},"defaultValue":null},{"name":"enlargeActive","type":{"name":"boolean"},"description":{"text":"Whether to enlarge the active page indicator\nIrrelevant when limitShownPages is in effect."},"defaultValue":{"value":"false"}},{"name":"spacing","type":{"name":"number"},"description":{"text":"The space between the siblings page indicators"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used to identify the pageControl in tests"},"defaultValue":null}]}},{"node":{"displayName":"Modal","docblock":"@description: Component that present content on top of the invoking screen\n@extends: Modal\n@extendsLink: https://reactnative.dev/docs/modal\n@gif: https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx","description":{"text":"@description: Component that present content on top of the invoking screen\n@extends: Modal\n@extendsLink: https://reactnative.dev/docs/modal\n@gif: https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx"},"props":[{"name":"enableModalBlur","type":{"name":"boolean"},"description":{"text":"Blurs the modal background when transparent (iOS only)"},"defaultValue":null},{"name":"blurView","type":{"name":"JSX.Element"},"description":{"text":"A custom view to use as a BlueView instead of the default one"},"defaultValue":null},{"name":"onBackgroundPress","type":{"name":"(event: GestureResponderEvent) => void"},"description":{"text":"allow dismissing a modal when clicking on its background"},"defaultValue":null},{"name":"overlayBackgroundColor","type":{"name":"string"},"description":{"text":"the background color of the overlay"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"The modal's end-to-end test identifier"},"defaultValue":null},{"name":"accessibilityLabel","type":{"name":"string"},"description":{"text":"Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space."},"defaultValue":null},{"name":"useGestureHandlerRootView","type":{"name":"boolean"},"description":{"text":"Should add a GestureHandlerRootView (Android only)"},"defaultValue":null}]}},{"node":{"displayName":"MaskedInput","docblock":"@description: Mask Input to create custom looking inputs with custom formats\n@gif: https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.js","description":{"text":"@description: Mask Input to create custom looking inputs with custom formats\n@gif: https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.js"},"props":[{"name":"renderMaskedText","type":{"name":"elementType"},"description":{"text":"callback for rendering the custom input out of the value returns from the actual input"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"container style for the masked input container"},"defaultValue":null}]}},{"node":{"displayName":"Modal.TopBar","docblock":"@description: Modal.TopBar, inner component for configuring the Modal component's title, buttons and statusBar\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx","description":{"text":"@description: Modal.TopBar, inner component for configuring the Modal component's title, buttons and statusBar\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx"},"props":[{"name":"title","type":{"name":"string"},"description":{"text":"title to display in the center of the top bar"},"defaultValue":null},{"name":"titleStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"title custom style"},"defaultValue":null},{"name":"doneButtonProps","type":{"name":"Omit<ButtonProps, 'onPress'>"},"description":{"text":"done action props (Button props)"},"defaultValue":{"value":"{}"}},{"name":"doneLabel","type":{"name":"string"},"description":{"text":"done action label"},"defaultValue":{"value":"'Save'"}},{"name":"doneIcon","type":{"name":"ImageSourcePropType"},"description":{"text":"done action icon"},"defaultValue":null},{"name":"onDone","type":{"name":"(props?: any) => void"},"description":{"text":"done action callback"},"defaultValue":null},{"name":"cancelButtonProps","type":{"name":"Omit<ButtonProps, 'onPress'>"},"description":{"text":"cancel action props (Button props)"},"defaultValue":{"value":"{}"}},{"name":"cancelLabel","type":{"name":"string"},"description":{"text":"cancel action label"},"defaultValue":null},{"name":"cancelIcon","type":{"name":"ImageSourcePropType"},"description":{"text":"cancel action icon"},"defaultValue":{"value":"Assets.icons.x"}},{"name":"onCancel","type":{"name":"(props?: any) => void"},"description":{"text":"cancel action callback"},"defaultValue":null},{"name":"includeStatusBar","type":{"name":"boolean"},"description":{"text":"whether to include status bar or not (height claculations)"},"defaultValue":{"value":"Constants.isIOS"}},{"name":"containerStyle","type":{"name":"ViewProps['style']"},"description":{"text":"style for the TopBar container"},"defaultValue":null}]}},{"node":{"displayName":"ListItem.Part","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"ListItem","docblock":"","description":{"text":""},"props":[{"name":"height","type":null,"description":{"text":""},"defaultValue":{"value":"63"}},{"name":"containerElement","type":null,"description":{"text":""},"defaultValue":{"value":"TouchableOpacity"}},{"name":"underlayColor","type":null,"description":{"text":""},"defaultValue":{"value":"Colors.grey70"}}]}},{"node":{"displayName":"LoaderScreen","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"ListItem","docblock":"@description: List item component to render inside a List component\n@extends: TouchableOpacity\n@gif: https://media.giphy.com/media/l1IBjHowyPcOTWAY8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.tsx","description":{"text":"@description: List item component to render inside a List component\n@extends: TouchableOpacity\n@gif: https://media.giphy.com/media/l1IBjHowyPcOTWAY8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.tsx"},"props":[{"name":"height","type":{"name":"ViewStyle['height']"},"description":{"text":"the list item height"},"defaultValue":null},{"name":"onPress","type":{"name":"() => void"},"description":{"text":"action for when pressing the item"},"defaultValue":null},{"name":"onLongPress","type":{"name":"() => void"},"description":{"text":"action for when long pressing the item"},"defaultValue":null},{"name":"containerStyle","type":{"name":"ViewStyle"},"description":{"text":"Additional styles for the top container"},"defaultValue":null},{"name":"containerElement","type":{"name":"React.ComponentType<ListItemProps | TouchableOpacityProps>"},"description":{"text":"The container element to wrap the ListItem"},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":"The inner element style"},"defaultValue":null},{"name":"underlayColor","type":{"name":"string"},"description":{"text":"The inner element pressed backgroundColor"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"ListItemPart","docblock":"@description: ListItem.Part, a sub ListItem component for layout-ing inside a ListItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.tsx","description":{"text":"@description: ListItem.Part, a sub ListItem component for layout-ing inside a ListItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.tsx"},"props":[{"name":"left","type":{"name":"boolean"},"description":{"text":"this part content will be aligned to left"},"defaultValue":null},{"name":"middle","type":{"name":"boolean"},"description":{"text":"this part content will be aligned to spreaded"},"defaultValue":null},{"name":"right","type":{"name":"boolean"},"description":{"text":"this part content will be aligned to right"},"defaultValue":null},{"name":"row","type":{"name":"boolean"},"description":{"text":"this part content direction will be row (default)"},"defaultValue":null},{"name":"column","type":{"name":"boolean"},"description":{"text":"this part content direction will be column"},"defaultValue":null},{"name":"containerStyle","type":{"name":"ViewStyle"},"description":{"text":"container style"},"defaultValue":null}]}},{"node":{"displayName":"LoaderScreen","docblock":"@description: Component that shows a full screen with an activity indicator\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/LoadingScreen.tsx","description":{"text":"@description: Component that shows a full screen with an activity indicator\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/LoadingScreen.tsx"},"props":[{"name":"loaderColor","type":{"name":"string"},"description":{"text":"Color of the loading indicator"},"defaultValue":null},{"name":"customLoader","type":{"name":"React.ReactChild"},"description":{"text":"Custom loader"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Color of the loader background (only when passing 'overlay')"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"loader message"},"defaultValue":null},{"name":"messageStyle","type":{"name":"TextStyle"},"description":{"text":"message style"},"defaultValue":null},{"name":"overlay","type":{"name":"boolean"},"description":{"text":"Show the screen as an absolute overlay"},"defaultValue":null},{"name":"containerStyle","type":{"name":"ViewStyle"},"description":{"text":"Custom container style"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"data","type":{"name":"any"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Image","docblock":"@description: Image wrapper with extra functionality like source transform and assets support\n@extends: Image\n@extendsLink: https://reactnative.dev/docs/image\n@notes: please note that for SVG support you need to add both\n`react-native-svg` and `react-native-svg-transformer`,\nand also configure them (see `metro.config.js`)","description":{"text":"@description: Image wrapper with extra functionality like source transform and assets support\n@extends: Image\n@extendsLink: https://reactnative.dev/docs/image\n@notes: please note that for SVG support you need to add both\n`react-native-svg` and `react-native-svg-transformer`,\nand also configure them (see `metro.config.js`)"},"props":[{"name":"sourceTransformer","type":{"name":"(props: any) => ImageSourcePropType"},"description":{"text":"custom source transform handler for manipulating the image source (great for size control)"},"defaultValue":null},{"name":"assetName","type":{"name":"string"},"description":{"text":"if provided image source will be driven from asset name"},"defaultValue":null},{"name":"assetGroup","type":{"name":"string"},"description":{"text":"the asset group, default is \"icons\""},"defaultValue":{"value":"'icons'"}},{"name":"tintColor","type":{"name":"string"},"description":{"text":"the asset tint"},"defaultValue":null},{"name":"supportRTL","type":{"name":"boolean"},"description":{"text":"whether the image should flip horizontally on RTL locals"},"defaultValue":null},{"name":"cover","type":{"name":"boolean"},"description":{"text":"Show image as a cover, full width, image (according to aspect ratio, default: 16:8)"},"defaultValue":null},{"name":"aspectRatio","type":{"name":"number"},"description":{"text":"The aspect ratio for the image"},"defaultValue":null},{"name":"overlayType","type":{"name":"OverlayTypeType"},"description":{"text":"The type of overly to place on top of the image. Note: the image MUST have proper size, see examples in:\nhttps://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/OverlaysScreen.tsx"},"defaultValue":null},{"name":"overlayColor","type":{"name":"string"},"description":{"text":"Pass a custom color for the overlay"},"defaultValue":null},{"name":"customOverlayContent","type":{"name":"JSX.Element"},"description":{"text":"Render an overlay with custom content"},"defaultValue":null},{"name":"errorSource","type":{"name":"ImageSourcePropType"},"description":{"text":"Default image source in case of an error"},"defaultValue":null}]}},{"node":{"displayName":"GridView","docblock":"@description: A auto-generated grid view that calculate item size according to given props\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx","description":{"text":"@description: A auto-generated grid view that calculate item size according to given props\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx"},"props":[{"name":"items","type":{"name":"GridListItemProps[]"},"description":{"text":"The list of items based on GridListItem props"},"defaultValue":null},{"name":"viewWidth","type":{"name":"number"},"description":{"text":"pass the desired grid view width (will improve loading time)"},"defaultValue":null},{"name":"numColumns","type":{"name":"number"},"description":{"text":"Number of items to show in a row"},"defaultValue":{"value":"3"}},{"name":"itemSpacing","type":{"name":"number"},"description":{"text":"Spacing between each item"},"defaultValue":{"value":"Spacings.s4"}},{"name":"lastItemLabel","type":{"name":"union"},"description":{"text":"overlay label for the last item"},"defaultValue":null},{"name":"lastItemOverlayColor","type":{"name":"string"},"description":{"text":"color of overlay label for the last item"},"defaultValue":null},{"name":"keepItemSize","type":{"name":"boolean"},"description":{"text":"whether to keep the items initial size when orientation changes,\nin which case the apt number of columns will be calculated automatically."},"defaultValue":null}]}},{"node":{"displayName":"GridListItem","docblock":"@description: A single grid view/list item component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx","description":{"text":"@description: A single grid view/list item component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx"},"props":[{"name":"imageProps","type":{"name":"ImageProps"},"description":{"text":"Image props object for rendering an image item"},"defaultValue":null},{"name":"containerProps","type":{"name":"Omit<TouchableOpacityProps | ViewProps, 'style'>"},"description":{"text":"Props to pass on to the touchable container"},"defaultValue":null},{"name":"renderCustomItem","type":{"name":"() => React.ReactElement"},"description":{"text":"Custom GridListItem to be rendered in the GridView"},"defaultValue":null},{"name":"itemSize","type":{"name":"union"},"description":{"text":"The item size"},"defaultValue":{"value":"48"}},{"name":"title","type":{"name":"union"},"description":{"text":"Title content text"},"defaultValue":null},{"name":"titleTypography","type":{"name":"string"},"description":{"text":"Title content typography"},"defaultValue":null},{"name":"titleColor","type":{"name":"string"},"description":{"text":"Title content color"},"defaultValue":null},{"name":"titleLines","type":{"name":"number"},"description":{"text":"Title content number of lines"},"defaultValue":null},{"name":"subtitle","type":{"name":"union"},"description":{"text":"Subtitle content text"},"defaultValue":null},{"name":"subtitleTypography","type":{"name":"string"},"description":{"text":"Subtitle content typography"},"defaultValue":null},{"name":"subtitleColor","type":{"name":"string"},"description":{"text":"Subtitle content color"},"defaultValue":null},{"name":"subtitleLines","type":{"name":"number"},"description":{"text":"Subtitle content number of lines"},"defaultValue":null},{"name":"description","type":{"name":"union"},"description":{"text":"Description content text"},"defaultValue":null},{"name":"descriptionTypography","type":{"name":"string"},"description":{"text":"Description content typography"},"defaultValue":null},{"name":"descriptionColor","type":{"name":"string"},"description":{"text":"Description content color"},"defaultValue":null},{"name":"descriptionLines","type":{"name":"number"},"description":{"text":"Description content number of lines"},"defaultValue":null},{"name":"overlayText","type":{"name":"boolean"},"description":{"text":"Renders the title, subtitle and description inside the item"},"defaultValue":null},{"name":"overlayTextContainerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Custom container styling for inline text"},"defaultValue":null},{"name":"alignToStart","type":{"name":"boolean"},"description":{"text":"Should content be align to start (default is center)"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Custom container style"},"defaultValue":null},{"name":"onPress","type":{"name":"TouchableOpacityProps['onPress']"},"description":{"text":"The item's action handler"},"defaultValue":null},{"name":"renderOverlay","type":{"name":"() => React.ReactElement"},"description":{"text":"Renders an overlay on top of the image"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Test ID for component"},"defaultValue":null}]}},{"node":{"displayName":"FloatingButton","docblock":"@description: Hovering button with gradient background\n@modifiers: margin, background, color\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FloatingButtonScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/FloatingButton/FloatingButton.gif?raw=true","description":{"text":"@description: Hovering button with gradient background\n@modifiers: margin, background, color\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FloatingButtonScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/FloatingButton/FloatingButton.gif?raw=true"},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Whether the button is visible"},"defaultValue":null},{"name":"button","type":{"name":"PropsWithChildren<ButtonProps>"},"description":{"text":"Button element (all Button's component's props)"},"defaultValue":null},{"name":"secondaryButton","type":{"name":"PropsWithChildren<ButtonProps>"},"description":{"text":"Secondary button element (all Button's component's props)"},"defaultValue":null},{"name":"bottomMargin","type":{"name":"number"},"description":{"text":"The bottom margin of the button, or secondary button if passed"},"defaultValue":null},{"name":"duration","type":{"name":"number"},"description":{"text":"The duration of the button's animations (show/hide)"},"defaultValue":{"value":"300"}},{"name":"withoutAnimation","type":{"name":"boolean"},"description":{"text":"Whether to show/hide the button without animation"},"defaultValue":null},{"name":"hideBackgroundOverlay","type":{"name":"boolean"},"description":{"text":"Whether to show background overlay"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as testing identifier\n<TestID> - the floatingButton container\n<TestID>.button - the floatingButton main button\n<TestID>.secondaryButton - the floatingButton secondaryButton"},"defaultValue":null}]}},{"node":{"displayName":"Hint","docblock":"@description: Hint component for displaying a tooltip over wrapped component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/HintsScreen.tsx\n@notes: You can either wrap a component or pass a specific targetFrame\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Hint/Hint.gif?raw=true","description":{"text":"@description: Hint component for displaying a tooltip over wrapped component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/HintsScreen.tsx\n@notes: You can either wrap a component or pass a specific targetFrame\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Hint/Hint.gif?raw=true"},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Control the visibility of the hint"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The hint background color"},"defaultValue":null},{"name":"message","type":{"name":"union"},"description":{"text":"The hint message"},"defaultValue":null},{"name":"messageStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"The hint message custom style"},"defaultValue":null},{"name":"icon","type":{"name":"ImageSourcePropType"},"description":{"text":"Icon to show next to the hint's message"},"defaultValue":null},{"name":"iconStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"The icon's style"},"defaultValue":null},{"name":"position","type":{"name":"HintPositions"},"description":{"text":"The hint's position"},"defaultValue":{"value":"HintPositions.BOTTOM"}},{"name":"targetFrame","type":{"name":"HintTargetFrame"},"description":{"text":"Provide custom target position instead of wrapping a child"},"defaultValue":null},{"name":"useSideTip","type":{"name":"boolean"},"description":{"text":"Show side tips instead of the middle tip"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The hint's border radius"},"defaultValue":null},{"name":"edgeMargins","type":{"name":"number"},"description":{"text":"Hint margins from screen edges"},"defaultValue":null},{"name":"offset","type":{"name":"number"},"description":{"text":"Hint offset from target"},"defaultValue":null},{"name":"onPress","type":{"name":"() => void"},"description":{"text":"Callback for Hint press"},"defaultValue":null},{"name":"onBackgroundPress","type":{"name":"(event: GestureResponderEvent) => void"},"description":{"text":"Callback for the background press"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The hint container width"},"defaultValue":null},{"name":"customContent","type":{"name":"JSX.Element"},"description":{"text":"Custom content element to render inside the hint container"},"defaultValue":null},{"name":"removePaddings","type":{"name":"boolean"},"description":{"text":"Remove all hint's paddings"},"defaultValue":null},{"name":"enableShadow","type":{"name":"boolean"},"description":{"text":"Enable shadow (for hint with white background only)"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"The hint's test identifier"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling"},"defaultValue":null}]}},{"node":{"displayName":"ExpandableSection","docblock":"@description: ExpandableSection component to render expanded section below or above the sectionHeader\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ExpandableSectionScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ExpandableSection/ExpandableSection.gif?raw=true","description":{"text":"@description: ExpandableSection component to render expanded section below or above the sectionHeader\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ExpandableSectionScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ExpandableSection/ExpandableSection.gif?raw=true"},"props":[{"name":"sectionHeader","type":{"name":"JSX.Element"},"description":{"text":"expandableSection header element"},"defaultValue":null},{"name":"children","type":{"name":"React.ReactNode"},"description":{"text":"expandableSection expandable children"},"defaultValue":null},{"name":"expanded","type":{"name":"boolean"},"description":{"text":"should the expandableSection be expanded"},"defaultValue":null},{"name":"top","type":{"name":"boolean"},"description":{"text":"should the expandableSection open above the sectionHeader"},"defaultValue":null},{"name":"onPress","type":{"name":"() => void"},"description":{"text":"action for when pressing the header of the expandableSection"},"defaultValue":null}]}},{"node":{"displayName":"Fader","docblock":"@description: A gradient fading overlay to render on top of overflowing content (like scroll component)\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FaderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Fader/Fader.gif?raw=true","description":{"text":"@description: A gradient fading overlay to render on top of overflowing content (like scroll component)\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FaderScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Fader/Fader.gif?raw=true"},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Whether the fader is visible (default is true)"},"defaultValue":null},{"name":"position","type":{"name":"FaderPosition"},"description":{"text":"The position of the fader (the image is different), defaults to Fader.position.END"},"defaultValue":null},{"name":"size","type":{"name":"number"},"description":{"text":"Set to change from the default size (50) of the fade view."},"defaultValue":null},{"name":"tintColor","type":{"name":"string"},"description":{"text":"Change the default (white) tint color of the fade view."},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"children","type":{"name":"any"},"description":{"text":""},"defaultValue":null},{"name":"friction","type":{"name":"number"},"description":{"text":""},"defaultValue":{"value":"1"}},{"name":"leftThreshold","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"rightThreshold","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"fullLeftThreshold","type":{"name":"number"},"description":{"text":""},"defaultValue":{"value":"0.45"}},{"name":"fullSwipeLeft","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"fullRightThreshold","type":{"name":"number"},"description":{"text":""},"defaultValue":{"value":"0.45"}},{"name":"fullSwipeRight","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"overshootLeft","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"overshootRight","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"overshootFriction","type":{"name":"number"},"description":{"text":""},"defaultValue":{"value":"1"}},{"name":"onSwipeableLeftOpen","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableRightOpen","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableOpen","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableClose","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableLeftWillOpen","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableRightWillOpen","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableWillOpen","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onSwipeableWillClose","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onFullSwipeLeft","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onToggleSwipeLeft","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onWillFullSwipeLeft","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onFullSwipeRight","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onWillFullSwipeRight","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"onDragStart","type":{"name":"Function"},"description":{"text":""},"defaultValue":null},{"name":"renderLeftActions","type":{"name":"(progressAnimatedValue: any, dragAnimatedValue: any) => any"},"description":{"text":""},"defaultValue":null},{"name":"renderRightActions","type":{"name":"(progressAnimatedValue: any, dragAnimatedValue: any) => any"},"description":{"text":""},"defaultValue":null},{"name":"leftActionsContainerStyle","type":{"name":"any"},"description":{"text":""},"defaultValue":null},{"name":"rightActionsContainerStyle","type":{"name":"any"},"description":{"text":""},"defaultValue":null},{"name":"useNativeAnimations","type":{"name":"boolean"},"description":{"text":""},"defaultValue":{"value":"false"}},{"name":"animationOptions","type":{"name":"Object"},"description":{"text":""},"defaultValue":null},{"name":"containerStyle","type":{"name":"Object"},"description":{"text":""},"defaultValue":null},{"name":"childrenContainerStyle","type":{"name":"Object"},"description":{"text":""},"defaultValue":null},{"name":"disableHaptic","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling"},"defaultValue":null},{"name":"direction","type":{"name":"PanningDirections"},"description":{"text":"The direction of the allowed pan (default is DOWN)\nTypes: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)"},"defaultValue":{"value":"PanningProvider.Directions.DOWN"}},{"name":"onDismiss","type":{"name":"() => void"},"description":{"text":"onDismiss callback"},"defaultValue":{"value":"() => {}"}},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The dialog`s container style"},"defaultValue":null},{"name":"visible","type":{"name":"boolean"},"description":{"text":"Whether to show the dialog or not"},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Drawer","docblock":"@description: Drawer Component\n@important: If your app works with RNN, your screen must be wrapped\nwith gestureHandlerRootHOC from 'react-native-gesture-handler'. see\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Drawer/Drawer.gif?raw=true","description":{"text":"@description: Drawer Component\n@important: If your app works with RNN, your screen must be wrapped\nwith gestureHandlerRootHOC from 'react-native-gesture-handler'. see\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Drawer/Drawer.gif?raw=true"},"props":[{"name":"bounciness","type":{"name":"number"},"description":{"text":"The drawer animation bounciness"},"defaultValue":null},{"name":"onDragStart","type":{"name":"Function"},"description":{"text":"OnDragStart handler"},"defaultValue":null},{"name":"rightItems","type":{"name":"ItemProps[]"},"description":{"text":"The bottom layer's items to appear when opened from the right"},"defaultValue":null},{"name":"leftItem","type":{"name":"ItemProps"},"description":{"text":"The bottom layer's item to appear when opened from the left (a single item)"},"defaultValue":null},{"name":"itemsMinWidth","type":{"name":"number"},"description":{"text":"Set a different minimum width"},"defaultValue":null},{"name":"itemsTintColor","type":{"name":"string"},"description":{"text":"The color for the text and icon tint of the items"},"defaultValue":{"value":"Colors.white"}},{"name":"itemsIconSize","type":{"name":"number"},"description":{"text":"The items' icon size"},"defaultValue":{"value":"24"}},{"name":"itemsTextStyle","type":{"name":"TextStyle"},"description":{"text":"The items' text style"},"defaultValue":null},{"name":"useNativeAnimations","type":{"name":"boolean"},"description":{"text":"Perform the animation in natively"},"defaultValue":null},{"name":"fullSwipeLeft","type":{"name":"boolean"},"description":{"text":"Whether to allow a full left swipe"},"defaultValue":null},{"name":"fullLeftThreshold","type":{"name":"number"},"description":{"text":"Threshold for a left full swipe (0-1)"},"defaultValue":null},{"name":"onFullSwipeLeft","type":{"name":"Function"},"description":{"text":"Callback for left item full swipe"},"defaultValue":null},{"name":"onToggleSwipeLeft","type":{"name":"Function"},"description":{"text":"Callback for left item toggle swipe"},"defaultValue":null},{"name":"onWillFullSwipeLeft","type":{"name":"Function"},"description":{"text":"Callback for just before left item full swipe"},"defaultValue":null},{"name":"fullSwipeRight","type":{"name":"boolean"},"description":{"text":"Whether to allow a full right swipe"},"defaultValue":null},{"name":"fullRightThreshold","type":{"name":"number"},"description":{"text":"Threshold for a right full swipe (0-1)"},"defaultValue":null},{"name":"onFullSwipeRight","type":{"name":"Function"},"description":{"text":"Callback for right item full swipe"},"defaultValue":null},{"name":"onWillFullSwipeRight","type":{"name":"Function"},"description":{"text":"Callback for just before right item full swipe"},"defaultValue":null},{"name":"leftToggleHapticTrigger","type":{"name":"Function"},"description":{"text":"Haptic trigger function to use onToggleSwipeLeft"},"defaultValue":null},{"name":"disableHaptic","type":{"name":"boolean"},"description":{"text":"Whether to disable the haptic"},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":"Style"},"defaultValue":null},{"name":"onSwipeableWillOpen","type":{"name":"Function"},"description":{"text":"Callback for open action"},"defaultValue":null},{"name":"onSwipeableWillClose","type":{"name":"Function"},"description":{"text":"Callback for close action"},"defaultValue":null},{"name":"customValue","type":{"name":"any"},"description":{"text":"Custom value of any type to pass on to the component and receive back in the action callbacks"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as testing identifier"},"defaultValue":null}]}},{"node":{"displayName":"FeatureHighlight","docblock":"@description: FeatureHighlight component for feature discovery\n@notes: 1) FeatureHighlight component must be a direct child of the root view returned in render().; 2) If the element to be highlighted doesn't have a style attribute add 'style={{opacity: 1}}' so the Android OS can detect it.\n@important: FeatureHighlight uses a native library. You MUST add and link the native library to both iOS and Android projects. For instruction please see\n@importantLink: https://facebook.github.io/react-native/docs/linking-libraries-ios.html\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/FeatureHighlight/FeatureHighlight.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FeatureHighlightScreen.tsx","description":{"text":"@description: FeatureHighlight component for feature discovery\n@notes: 1) FeatureHighlight component must be a direct child of the root view returned in render().; 2) If the element to be highlighted doesn't have a style attribute add 'style={{opacity: 1}}' so the Android OS can detect it.\n@important: FeatureHighlight uses a native library. You MUST add and link the native library to both iOS and Android projects. For instruction please see\n@importantLink: https://facebook.github.io/react-native/docs/linking-libraries-ios.html\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/FeatureHighlight/FeatureHighlight.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FeatureHighlightScreen.tsx"},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Boolean to determine if to present the feature highlight component"},"defaultValue":null},{"name":"highlightFrame","type":{"name":"{\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}"},"description":{"text":"Frame of the area to highlight {x, y, width, height}"},"defaultValue":null},{"name":"getTarget","type":{"name":"() => any"},"description":{"text":"Callback that extract the ref of the element to be highlighted"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"Title of the content to be displayed"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"Message to be displayed"},"defaultValue":null},{"name":"titleStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Title text style"},"defaultValue":null},{"name":"messageStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Message text style"},"defaultValue":null},{"name":"titleNumberOfLines","type":{"name":"number"},"description":{"text":"Title's max number of lines"},"defaultValue":null},{"name":"messageNumberOfLines","type":{"name":"number"},"description":{"text":"Message's max number of lines"},"defaultValue":null},{"name":"confirmButtonProps","type":{"name":"ButtonProps"},"description":{"text":"Props that will be passed to the dismiss button"},"defaultValue":null},{"name":"onBackgroundPress","type":{"name":"TouchableWithoutFeedbackProps['onPress']"},"description":{"text":"Callback for the background press"},"defaultValue":null},{"name":"overlayColor","type":{"name":"string"},"description":{"text":"Color of the content's background (usually includes alpha for transparency)"},"defaultValue":null},{"name":"textColor","type":{"name":"string"},"description":{"text":"Color of the content's text"},"defaultValue":null},{"name":"borderColor","type":{"name":"string"},"description":{"text":"Color of the border around the highlighted element"},"defaultValue":null},{"name":"borderWidth","type":{"name":"number"},"description":{"text":"Width of the border around the highlighted element"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"Border radius for the border corners around the highlighted element"},"defaultValue":null},{"name":"minimumRectSize","type":{"name":"{\n  width: number;\n  height: number;\n}"},"description":{"text":"The minimum size of the highlighted component (Android API 21+, and only when passing a ref in 'getTarget')"},"defaultValue":{"value":"{width: 56, height: 56}"}},{"name":"innerPadding","type":{"name":"number"},"description":{"text":"The padding of the highlight frame around the highlighted element's frame (only when passing ref in 'getTarget')"},"defaultValue":{"value":"10"}},{"name":"pageControlProps","type":{"name":"PageControlProps"},"description":{"text":"PageControl component's props"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Dialog","docblock":"@description: Dialog component for displaying custom content inside a popup dialog\n@notes: Use alignment modifiers to control the dialog position\n(top, bottom, centerV, centerH, etc... by default the dialog is aligned to center)\n@modifiers: alignment\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DialogScreen.js\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Dialog/Dialog.gif?raw=true","description":{"text":"@description: Dialog component for displaying custom content inside a popup dialog\n@notes: Use alignment modifiers to control the dialog position\n(top, bottom, centerV, centerH, etc... by default the dialog is aligned to center)\n@modifiers: alignment\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DialogScreen.js\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Dialog/Dialog.gif?raw=true"},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Control visibility of the dialog"},"defaultValue":null},{"name":"onDismiss","type":{"name":"(props?: any) => void"},"description":{"text":"Dismiss callback for when clicking on the background"},"defaultValue":null},{"name":"ignoreBackgroundPress","type":{"name":"boolean"},"description":{"text":"Whether or not to ignore background press"},"defaultValue":null},{"name":"overlayBackgroundColor","type":{"name":"string"},"description":{"text":"The color of the overlay background"},"defaultValue":{"value":"Colors.rgba(Colors.grey10, 0.6)"}},{"name":"width","type":{"name":"union"},"description":{"text":"The dialog width (default: 90%)"},"defaultValue":null},{"name":"height","type":{"name":"union"},"description":{"text":"The dialog height (default: undefined)"},"defaultValue":null},{"name":"panDirection","type":{"name":"PanningDirections"},"description":{"text":"The direction of the allowed pan (default is DOWN).\nTypes: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###).\nPass null to remove pan."},"defaultValue":null},{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":"Whether or not to handle SafeArea"},"defaultValue":null},{"name":"onDialogDismissed","type":{"name":"(props: any) => void"},"description":{"text":"Called once the dialog has been dismissed completely"},"defaultValue":null},{"name":"renderPannableHeader","type":{"name":"(props: any) => JSX.Element"},"description":{"text":"If this is added only the header will be pannable;\nthis allows for scrollable content (the children of the dialog)\nprops are transferred to the renderPannableHeader"},"defaultValue":null},{"name":"pannableHeaderProps","type":{"name":"any"},"description":{"text":"The props that will be passed to the pannable header"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"The Dialog`s container style"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as a testing identifier"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"dialogVisibility","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"modalVisibility","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"overlayBackgroundColor","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"onFadeDone","type":{"name":"() => void"},"description":{"text":""},"defaultValue":null},{"name":"fadeOut","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"ConnectionStatusBar","docblock":"@description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n@image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.tsx\n@notes: The component requires installing the '@react-native-community/netinfo' native library","description":{"text":"@description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n@image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.tsx\n@notes: The component requires installing the '@react-native-community/netinfo' native library"},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"Text to show as the status"},"defaultValue":{"value":"'No internet. Check your connection.'"}},{"name":"onConnectionChange","type":{"name":"(isConnected: boolean, isInitial: boolean) => void"},"description":{"text":"Handler to get connection change events propagation"},"defaultValue":null},{"name":"allowDismiss","type":{"name":"boolean"},"description":{"text":"Text to show as the status"},"defaultValue":{"value":"false"}},{"name":"useAbsolutePosition","type":{"name":"boolean"},"description":{"text":"Use absolute position for the component"},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"DateTimePicker","docblock":"@description: Date and Time Picker Component that wraps RNDateTimePicker for date and time modes.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.js\n@important: DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects.\n@extends: TextField, react-native-community/datetimepicker\n@extendsLink: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_iOS.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_Android.gif?raw=true","description":{"text":"@description: Date and Time Picker Component that wraps RNDateTimePicker for date and time modes.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.js\n@important: DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects.\n@extends: TextField, react-native-community/datetimepicker\n@extendsLink: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_iOS.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_Android.gif?raw=true"},"props":[{"name":"mode","type":{"name":"enum"},"description":{"text":"The type of picker to display ('date' or 'time')"},"defaultValue":{"value":"'date'"}},{"name":"value","type":{"name":"instanceOf"},"description":{"text":"The initial value to set the picker to. Defaults to device's date / time"},"defaultValue":null},{"name":"onChange","type":{"name":"func"},"description":{"text":"The onChange callback"},"defaultValue":null},{"name":"minimumDate","type":{"name":"instanceOf"},"description":{"text":"The minimum date or time value to use"},"defaultValue":null},{"name":"maximumDate","type":{"name":"instanceOf"},"description":{"text":"The maximum date or time value to use"},"defaultValue":null},{"name":"dateFormat","type":{"name":"string"},"description":{"text":"The date format for the text display"},"defaultValue":null},{"name":"dateFormatter","type":{"name":"func"},"description":{"text":"A callback function to format date"},"defaultValue":null},{"name":"timeFormat","type":{"name":"string"},"description":{"text":"The time format for the text display"},"defaultValue":null},{"name":"timeFormatter","type":{"name":"func"},"description":{"text":"A callback function to format time"},"defaultValue":null},{"name":"locale","type":{"name":"string"},"description":{"text":"Allows changing of the locale of the component (iOS only)"},"defaultValue":null},{"name":"is24Hour","type":{"name":"bool"},"description":{"text":"Allows changing of the time picker to a 24 hour format (Android only)"},"defaultValue":null},{"name":"minuteInterval","type":{"name":"number"},"description":{"text":"The interval at which minutes can be selected. Possible values are: 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30 (iOS only)"},"defaultValue":null},{"name":"timeZoneOffsetInMinutes","type":{"name":"number"},"description":{"text":"Allows changing of the timeZone of the date picker. By default it uses the device's time zone (iOS only)"},"defaultValue":null},{"name":"dialogProps","type":{"name":"object"},"description":{"text":"Props to pass the Dialog component"},"defaultValue":null},{"name":"headerStyle","type":{"name":"union"},"description":{"text":"style to apply to the iOS dialog header"},"defaultValue":null},{"name":"renderInput","type":{"name":"elementType"},"description":{"text":"Render custom input"},"defaultValue":null},{"name":"themeVariant","type":{"name":"enum"},"description":{"text":"Override system theme variant (dark or light mode) used by the date picker."},"defaultValue":null}]}},{"node":{"displayName":"ConnectionStatusBar","docblock":"@description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n@image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.tsx\n@notes: The component requires installing the '@react-native-community/netinfo' native library","description":{"text":"@description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n@image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.tsx\n@notes: The component requires installing the '@react-native-community/netinfo' native library"},"props":[]}},{"node":{"displayName":"ColorPalette","docblock":"@description: A color palette component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n@notes: This is a screen width component\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPalette/ColorPalette.gif?raw=true","description":{"text":"@description: A color palette component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n@notes: This is a screen width component\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPalette/ColorPalette.gif?raw=true"},"props":[{"name":"colors","type":{"name":"string[]"},"description":{"text":"Array of colors to render in the palette"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Style to pass the palette container"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The container margins"},"defaultValue":null},{"name":"usePagination","type":{"name":"boolean"},"description":{"text":"Whether to use pagination when number of colors exceeds the number of rows"},"defaultValue":{"value":"true"}},{"name":"loop","type":{"name":"boolean"},"description":{"text":"Whether the colors pagination scrolls in a loop"},"defaultValue":{"value":"true"}},{"name":"numberOfRows","type":{"name":"number"},"description":{"text":"The number of color rows from 2 to 5"},"defaultValue":{"value":"3"}},{"name":"swatchStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Style to pass all the ColorSwatches in the palette"},"defaultValue":null},{"name":"value","type":{"name":"string"},"description":{"text":"The value of the selected swatch"},"defaultValue":null},{"name":"animatedIndex","type":{"name":"number"},"description":{"text":"The index of the item to animate at first render (default is last)"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: string, options: object) => void"},"description":{"text":"Invoked once when value changes by selecting one of the swatches in the palette"},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"ColorSwatch","docblock":"@description: A color swatch component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPalette/ColorPalette.gif?raw=true","description":{"text":"@description: A color swatch component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPalette/ColorPalette.gif?raw=true"},"props":[{"name":"value","type":{"name":"string"},"description":{"text":"The identifier value of the ColorSwatch in a ColorSwatch palette.\nMust be different than other ColorSwatches in the same group"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The color of the ColorSwatch"},"defaultValue":null},{"name":"selected","type":{"name":"boolean"},"description":{"text":"Is the initial state is selected"},"defaultValue":null},{"name":"animated","type":{"name":"boolean"},"description":{"text":"Is first render should be animated"},"defaultValue":null},{"name":"onPress","type":{"name":"(value: string, options: object) => void"},"description":{"text":"onPress callback"},"defaultValue":null},{"name":"index","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"ColorPicker","docblock":"@description: A color picker component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n@notes: This is a screen width component\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPicker/ColorPicker.gif?raw=true","description":{"text":"@description: A color picker component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx\n@notes: This is a screen width component\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ColorPicker/ColorPicker.gif?raw=true"},"props":[{"name":"colors","type":{"name":"string[]"},"description":{"text":"Array of colors for the picker's color palette (hex values)"},"defaultValue":null},{"name":"value","type":{"name":"string"},"description":{"text":"The value of the selected swatch // TODO: rename prop 'selectedValue'"},"defaultValue":null},{"name":"animatedIndex","type":{"name":"number"},"description":{"text":"The index of the item to animate at first render (default is last)"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: string, options: object) => void"},"description":{"text":"onValueChange callback for the picker's color palette change"},"defaultValue":null},{"name":"accessibilityLabels","type":{"name":"{\n  addButton?: string,\n  dismissButton?: string,\n  doneButton?: string,\n  input?: string\n}"},"description":{"text":"Accessibility labels as an object of strings, ex.\n{\n addButton: 'add custom color using hex code',\n dismissButton: 'dismiss',\n doneButton: 'done',\n input: 'custom hex color code'\n}"},"defaultValue":{"value":"{\n  addButton: 'add custom color using hex code',\n  dismissButton: 'dismiss',\n  doneButton: 'done',\n  input: 'custom hex color code'\n}"}},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"ColorPicker","docblock":"@description: A color picker dialog component\n@extends: Dialog\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx","description":{"text":"@description: A color picker dialog component\n@extends: Dialog\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.tsx"},"props":[{"name":"initialColor","type":{"name":"string"},"description":{"text":"The initial color to pass the picker dialog"},"defaultValue":{"value":"Colors.grey80"}},{"name":"onSubmit","type":{"name":"(color: string, textColor: string) => void"},"description":{"text":"onSubmit callback for the picker dialog color change"},"defaultValue":null},{"name":"dialogProps","type":{"name":"object"},"description":{"text":"Props to pass the Dialog component // TODO: deprecate 'dialogProps' prop"},"defaultValue":null},{"name":"previewInputStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling for the color preview text."},"defaultValue":null},{"name":"doneButtonColor","type":{"name":"string"},"description":{"text":"Ok (v) button color"},"defaultValue":null},{"name":"accessibilityLabels","type":{"name":"{\n  dismissButton?: string,\n  doneButton?: string,\n  input?: string\n}"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Chip","docblock":"@description: Chip component\n@extends: TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipScreen.tsx\n@image: https://user-images.githubusercontent.com/1780255/119636022-e9743180-be1c-11eb-8f02-22eeab6558cd.png","description":{"text":"@description: Chip component\n@extends: TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipScreen.tsx\n@image: https://user-images.githubusercontent.com/1780255/119636022-e9743180-be1c-11eb-8f02-22eeab6558cd.png"},"props":[{"name":"size","type":{"name":"union"},"description":{"text":"Chip's size. Number or a width and height object."},"defaultValue":{"value":"26"}},{"name":"onPress","type":{"name":"(props: any) => void"},"description":{"text":"On Chip press callback"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Chip's background color"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The Chip borderRadius"},"defaultValue":{"value":"BorderRadiuses.br100"}},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Chip's container style"},"defaultValue":null},{"name":"useSizeAsMinimum","type":{"name":"boolean"},"description":{"text":"Uses size as minWidth and minHeight - default is true"},"defaultValue":{"value":"true"}},{"name":"resetSpacings","type":{"name":"boolean"},"description":{"text":"Disables all internal elements default spacings. Helps reach a custom design"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as testing identifier"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"Main Chip text"},"defaultValue":null},{"name":"labelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Label's style"},"defaultValue":null},{"name":"badgeProps","type":{"name":"BadgeProps"},"description":{"text":"Badge props object"},"defaultValue":null},{"name":"useCounter","type":{"name":"boolean"},"description":{"text":"Display badge as counter (no background)"},"defaultValue":null},{"name":"avatarProps","type":{"name":"AvatarProps"},"description":{"text":"Avatar props object"},"defaultValue":null},{"name":"iconProps","type":{"name":"Omit<ImageProps, 'source'>"},"description":{"text":"Additional icon props"},"defaultValue":null},{"name":"iconStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"Icon style"},"defaultValue":null},{"name":"iconSource","type":{"name":"ImageSourcePropType"},"description":{"text":"Left icon's source"},"defaultValue":null},{"name":"rightIconSource","type":{"name":"ImageSourcePropType"},"description":{"text":"Right icon's source"},"defaultValue":null},{"name":"leftElement","type":{"name":"JSX.Element"},"description":{"text":"Left custom element"},"defaultValue":null},{"name":"rightElement","type":{"name":"JSX.Element"},"description":{"text":"Right custom element"},"defaultValue":null},{"name":"onDismiss","type":{"name":"(props: any) => void"},"description":{"text":"Adds a dismiss button and serves as its callback"},"defaultValue":null},{"name":"dismissColor","type":{"name":"string"},"description":{"text":"Dismiss color"},"defaultValue":null},{"name":"dismissIcon","type":{"name":"ImageSourcePropType"},"description":{"text":"Dismiss asset"},"defaultValue":{"value":"Assets.icons.x"}},{"name":"dismissIconStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"Dismiss style"},"defaultValue":null},{"name":"dismissContainerStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"Dismiss container style"},"defaultValue":null}]}},{"node":{"displayName":"ChipsInput","docblock":"@description: Tags input component (chips)\n@modifiers: Typography\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ChipsInput/ChipsInput.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n@extends: TextField","description":{"text":"@description: Tags input component (chips)\n@modifiers: Typography\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ChipsInput/ChipsInput.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n@extends: TextField"},"props":[{"name":"tags","type":{"name":"arrayOf"},"description":{"text":"list of tags. can be string boolean or custom object when implementing getLabel"},"defaultValue":null},{"name":"getLabel","type":{"name":"func"},"description":{"text":"callback for extracting the label out of the tag item"},"defaultValue":null},{"name":"renderTag","type":{"name":"elementType"},"description":{"text":"callback for custom rendering tag item"},"defaultValue":null},{"name":"onChangeTags","type":{"name":"func"},"description":{"text":"callback for onChangeTags event"},"defaultValue":null},{"name":"onCreateTag","type":{"name":"func"},"description":{"text":"callback for creating new tag out of input value (good for composing tag object)"},"defaultValue":null},{"name":"onTagPress","type":{"name":"func"},"description":{"text":"callback for when pressing a tag in the following format (tagIndex, markedTagIndex) => {...}"},"defaultValue":null},{"name":"validationErrorMessage","type":{"name":"string"},"description":{"text":"validation message error appears when tag isn't validate"},"defaultValue":null},{"name":"disableTagRemoval","type":{"name":"bool"},"description":{"text":"if true, tags *removal* Ux won't be available"},"defaultValue":null},{"name":"disableTagAdding","type":{"name":"bool"},"description":{"text":"if true, tags *adding* Ux (i.e. by 'submitting' the input text) won't be available"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"custom styling for the component container"},"defaultValue":null},{"name":"tagStyle","type":{"name":"custom"},"description":{"text":"custom styling for the tag item"},"defaultValue":null},{"name":"inputStyle","type":{"name":"custom"},"description":{"text":"custom styling for the text input"},"defaultValue":null},{"name":"hideUnderline","type":{"name":"bool"},"description":{"text":"should hide input underline"},"defaultValue":null}]}},{"node":{"displayName":"Checkbox","docblock":"@description: Checkbox component for toggling boolean value related to some context\n@extends: TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CheckboxScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Checkbox/Checkbox.gif?raw=true","description":{"text":"@description: Checkbox component for toggling boolean value related to some context\n@extends: TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CheckboxScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Checkbox/Checkbox.gif?raw=true"},"props":[{"name":"value","type":{"name":"boolean"},"description":{"text":"The value of the Checkbox. If true the switch will be turned on. Default value is false."},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: boolean) => void"},"description":{"text":"Invoked with the new value when the value changes."},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"Whether the checkbox should be disabled"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The Checkbox color"},"defaultValue":null},{"name":"outline","type":{"name":"boolean"},"description":{"text":"alternative Checkbox outline style"},"defaultValue":null},{"name":"size","type":{"name":"number"},"description":{"text":"The size of the checkbox. affect both width and height"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The Checkbox border radius"},"defaultValue":null},{"name":"selectedIcon","type":{"name":"number"},"description":{"text":"The icon asset to use for the selected indication (accept only local assets)"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"The selected icon color"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"The label of the checkbox"},"defaultValue":null},{"name":"labelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"The style of the label"},"defaultValue":null},{"name":"labelProps","type":{"name":"Omit<TextProps, 'style'>"},"description":{"text":"Props that will be passed to the checkbox Text label."},"defaultValue":null},{"name":"style","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional styling for checkbox and label container"},"defaultValue":null}]}},{"node":{"displayName":"Carousel","docblock":"","description":{"text":""},"props":[{"name":"initialPage","type":{"name":"number"},"description":{"text":"the first page to start with"},"defaultValue":null},{"name":"pageWidth","type":{"name":"number"},"description":{"text":"the page width (all pages should have the same width). Does not work if passing 'loop' prop"},"defaultValue":null},{"name":"pageHeight","type":{"name":"number"},"description":{"text":"the page height (all pages should have the same height)."},"defaultValue":null},{"name":"itemSpacings","type":{"name":"number"},"description":{"text":"the spacing between the items"},"defaultValue":null},{"name":"containerMarginHorizontal","type":{"name":"number"},"description":{"text":"Horizontal margin for the container"},"defaultValue":null},{"name":"containerPaddingVertical","type":{"name":"number"},"description":{"text":"Vertical padding for the container.\nSometimes needed when there are overflows that are cut in Android."},"defaultValue":null},{"name":"loop","type":{"name":"boolean"},"description":{"text":"if true, will have infinite scroll (do not turn on for vertical scrolling)"},"defaultValue":null},{"name":"onChangePage","type":{"name":"(newPageIndex: number, oldPageIndex: number, info: {isAutoScrolled: boolean}) => void"},"description":{"text":"callback for when page has changed"},"defaultValue":null},{"name":"onScroll","type":{"name":"(event: NativeSyntheticEvent<NativeScrollEvent>) => void"},"description":{"text":"callback for onScroll event of the internal ScrollView"},"defaultValue":null},{"name":"animated","type":{"name":"boolean"},"description":{"text":"Should the container be animated (send the animation style via containerStyle)"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"the carousel style"},"defaultValue":null},{"name":"pageControlProps","type":{"name":"Partial<PageControlProps>"},"description":{"text":"PageControl component props"},"defaultValue":null},{"name":"pageControlPosition","type":{"name":"PageControlPosition"},"description":{"text":"The position of the PageControl component ['over', 'under'], otherwise it won't display"},"defaultValue":null},{"name":"showCounter","type":{"name":"boolean"},"description":{"text":"whether to show a page counter (will not work with 'pageWidth' prop)"},"defaultValue":null},{"name":"counterTextStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"the counter's text style"},"defaultValue":null},{"name":"pagingEnabled","type":{"name":"boolean"},"description":{"text":"will block multiple pages scroll (will not work with 'pageWidth' prop)"},"defaultValue":null},{"name":"allowAccessibleLayout","type":{"name":"boolean"},"description":{"text":"Whether to layout Carousel for accessibility"},"defaultValue":null},{"name":"autoplay","type":{"name":"boolean"},"description":{"text":"Whether to switch automatically between the pages"},"defaultValue":null},{"name":"autoplayInterval","type":{"name":"number"},"description":{"text":"the amount of ms to wait before switching to the next page, in case autoplay is on"},"defaultValue":null},{"name":"horizontal","type":{"name":"union"},"description":{"text":"When true the scroll view's children are arranged horizontally in a row\ninstead of vertically in a column. The default value is true."},"defaultValue":null},{"name":"animatedScrollOffset","type":{"name":"Animated.ValueXY"},"description":{"text":"Pass to attach to ScrollView's Animated.event in order to animated elements base on \nCarousel scroll offset (pass new Animated.ValueXY())"},"defaultValue":null}]}},{"node":{"displayName":"Card.Image","docblock":"@description: Card.Image, part of the Card component belongs inside a Card (better be a direct child)\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardsScreen.tsx","description":{"text":"@description: Card.Image, part of the Card component belongs inside a Card (better be a direct child)\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardsScreen.tsx"},"props":[{"name":"width","type":{"name":"union"},"description":{"text":"Image width"},"defaultValue":null},{"name":"height","type":{"name":"union"},"description":{"text":"Image height"},"defaultValue":null},{"name":"position","type":{"name":"string[]"},"description":{"text":"The Image position which determines the appropriate flex-ness of the image and border radius (for Android)\nthis prop derived automatically from Card parent component if it rendered as a direct child of the\nCard component"},"defaultValue":null}]}},{"node":{"displayName":"Carousel","docblock":"@description: Carousel for scrolling pages horizontally\n@gif: https://user-images.githubusercontent.com/1780255/107120258-40b5bc80-6895-11eb-9596-8065d3a940ff.gif, https://user-images.githubusercontent.com/1780255/107120257-3eebf900-6895-11eb-9800-402e9e0dc692.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CarouselScreen.tsx\n@extends: ScrollView\n@extendsLink: https://reactnative.dev/docs/scrollview\n@notes: This is a screen width Component","description":{"text":"@description: Carousel for scrolling pages horizontally\n@gif: https://user-images.githubusercontent.com/1780255/107120258-40b5bc80-6895-11eb-9596-8065d3a940ff.gif, https://user-images.githubusercontent.com/1780255/107120257-3eebf900-6895-11eb-9800-402e9e0dc692.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CarouselScreen.tsx\n@extends: ScrollView\n@extendsLink: https://reactnative.dev/docs/scrollview\n@notes: This is a screen width Component"},"props":[{"name":"initialPage","type":null,"description":{"text":""},"defaultValue":{"value":"0"}},{"name":"pagingEnabled","type":null,"description":{"text":""},"defaultValue":{"value":"true"}},{"name":"autoplay","type":null,"description":{"text":""},"defaultValue":{"value":"false"}},{"name":"autoplayInterval","type":null,"description":{"text":""},"defaultValue":{"value":"4000"}},{"name":"horizontal","type":null,"description":{"text":""},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"Card.Section","docblock":"@description: Card.Section for rendering content easily inside a card\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardsScreen.tsx","description":{"text":"@description: Card.Section for rendering content easily inside a card\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardsScreen.tsx"},"props":[{"name":"content","type":{"name":"ContentType[]"},"description":{"text":"Text content for the CardSection.\nExample: content={[{text: 'You’re Invited!', text70: true, grey10: true}]}"},"defaultValue":null},{"name":"contentStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Style for the content"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Give the section a background color"},"defaultValue":null},{"name":"leadingIcon","type":{"name":"ImageProps"},"description":{"text":"Image props for a leading icon to render before the text"},"defaultValue":null},{"name":"trailingIcon","type":{"name":"ImageProps"},"description":{"text":"Image props for a trailing icon to render after the text"},"defaultValue":null},{"name":"imageSource","type":{"name":"ImageSourcePropType"},"description":{"text":"Will be used for the background when provided"},"defaultValue":null},{"name":"imageStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"The style for the background image"},"defaultValue":null},{"name":"imageProps","type":{"name":"Partial<ImageProps>"},"description":{"text":"Other image props that will be passed to the image"},"defaultValue":null}]}},{"node":{"displayName":"Card","docblock":"@description: Card component\n@extends: TouchableOpacity\n@modifiers: margin, padding\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_01.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_02.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_03.png?raw=true\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Card_Selecteable.gif, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_activeScale.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardsScreen.tsx\n@notes: 'enableBlur' prop requires installing the '@react-native-community/blur' native library","description":{"text":"@description: Card component\n@extends: TouchableOpacity\n@modifiers: margin, padding\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_01.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_02.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_03.png?raw=true\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Card_Selecteable.gif, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Card/Cards_activeScale.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardsScreen.tsx\n@notes: 'enableBlur' prop requires installing the '@react-native-community/blur' native library"},"props":[{"name":"width","type":{"name":"union"},"description":{"text":"card custom width"},"defaultValue":null},{"name":"height","type":{"name":"union"},"description":{"text":"card custom height"},"defaultValue":null},{"name":"row","type":{"name":"boolean"},"description":{"text":"should inner card flow direction be horizontal"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"card border radius (will be passed to inner Card.Image component)"},"defaultValue":null},{"name":"onPress","type":{"name":"TouchableOpacityProps['onPress']"},"description":{"text":"action for when pressing the card"},"defaultValue":null},{"name":"enableShadow","type":{"name":"boolean"},"description":{"text":"whether the card should have shadow or not"},"defaultValue":{"value":"true"}},{"name":"elevation","type":{"name":"number"},"description":{"text":"elevation value (Android only)"},"defaultValue":null},{"name":"enableBlur","type":{"name":"boolean"},"description":{"text":"enable blur effect (iOS only)"},"defaultValue":null},{"name":"blurOptions","type":{"name":"object"},"description":{"text":"blur option for blur effect according to @react-native-community/blur lib (make sure enableBlur is on)"},"defaultValue":null},{"name":"containerStyle","type":{"name":"ViewStyle"},"description":{"text":"Additional styles for the top container"},"defaultValue":null},{"name":"selected","type":{"name":"boolean"},"description":{"text":"Adds visual indication that the card is selected"},"defaultValue":null},{"name":"selectionOptions","type":{"name":"{\n  icon?: number;\n  iconColor?: string;\n  color?: string;\n  borderWidth?: number;\n  indicatorSize?: number;\n  hideIndicator?: boolean;\n}"},"description":{"text":"Custom options for styling the selection indication"},"defaultValue":null}]}},{"node":{"displayName":"Button","docblock":"@description: Basic button component\n@extends: TouchableOpacity\n@modifiers: margin, background\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Sizes.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Typographies.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Outlines.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Corners.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Custom.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Inspirations.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Round.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Full.png?raw=true\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Animated.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ButtonsScreen.tsx","description":{"text":"@description: Basic button component\n@extends: TouchableOpacity\n@modifiers: margin, background\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Sizes.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Typographies.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Outlines.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Corners.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Custom.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Inspirations.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Round.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Full.png?raw=true\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Animated.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ButtonsScreen.tsx"},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"Text to show inside the button"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The Button text color (inherited from Text component)"},"defaultValue":null},{"name":"iconSource","type":{"name":"union"},"description":{"text":"Icon image source or a callback function that returns a source"},"defaultValue":null},{"name":"iconStyle","type":{"name":"StyleProp<ImageStyle>"},"description":{"text":"Icon image style"},"defaultValue":null},{"name":"iconOnRight","type":{"name":"boolean"},"description":{"text":"Should the icon be right to the label"},"defaultValue":{"value":"false"}},{"name":"supportRTL","type":{"name":"boolean"},"description":{"text":"whether the icon should flip horizontally on RTL locals"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Color of the button background"},"defaultValue":null},{"name":"disabledBackgroundColor","type":{"name":"string"},"description":{"text":"Color of the disabled button background"},"defaultValue":null},{"name":"size","type":{"name":"ButtonSize"},"description":{"text":"Size of the button [large, medium, small, xSmall]"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"Custom border radius."},"defaultValue":null},{"name":"onPress","type":{"name":"(props: any) => void"},"description":{"text":"Actions handler"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"Disable interactions for the component"},"defaultValue":null},{"name":"outline","type":{"name":"boolean"},"description":{"text":"Button will have outline style"},"defaultValue":null},{"name":"outlineColor","type":{"name":"string"},"description":{"text":"The outline color"},"defaultValue":null},{"name":"outlineWidth","type":{"name":"number"},"description":{"text":"The outline width"},"defaultValue":null},{"name":"link","type":{"name":"boolean"},"description":{"text":"Button will look like a link"},"defaultValue":null},{"name":"linkColor","type":{"name":"string"},"description":{"text":"label color for when it's displayed as link"},"defaultValue":null},{"name":"labelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Additional styles for label text"},"defaultValue":null},{"name":"labelProps","type":{"name":"TextProps"},"description":{"text":"Props that will be passed to the button's Text label."},"defaultValue":null},{"name":"fullWidth","type":{"name":"boolean"},"description":{"text":"should the button act as a coast to coast button (no border radius)"},"defaultValue":null},{"name":"round","type":{"name":"boolean"},"description":{"text":"should the button be a round button"},"defaultValue":null},{"name":"enableShadow","type":{"name":"boolean"},"description":{"text":"Control shadow visibility (iOS-only)"},"defaultValue":null},{"name":"avoidInnerPadding","type":{"name":"boolean"},"description":{"text":"avoid inner button padding"},"defaultValue":null},{"name":"avoidMinWidth","type":{"name":"boolean"},"description":{"text":"avoid minimum width constraints"},"defaultValue":null},{"name":"getActiveBackgroundColor","type":{"name":"(backgroundColor: string, props: any) => string"},"description":{"text":"callback for getting activeBackgroundColor (e.g. (calculatedBackgroundColor, prop) => {...})\nbetter set using ThemeManager"},"defaultValue":null},{"name":"animateLayout","type":{"name":"boolean"},"description":{"text":"should animate layout change\nNote?: For Android you must set 'setLayoutAnimationEnabledExperimental(true)' via RN's 'UIManager'"},"defaultValue":null},{"name":"animateTo","type":{"name":"ButtonAnimationDirection"},"description":{"text":"the direction of the animation ('left' and 'right' will effect the button's own alignment)"},"defaultValue":null}]}},{"node":{"displayName":"Button","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"AnimatedScanner","docblock":"@description: Scanner component for progress indication\n@extends: Animated.View\n@gif: https://media.giphy.com/media/l49JVcxoclUXbryiA/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardScannerScreen.js","description":{"text":"@description: Scanner component for progress indication\n@extends: Animated.View\n@gif: https://media.giphy.com/media/l49JVcxoclUXbryiA/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardScannerScreen.js"},"props":[{"name":"progress","type":{"name":"number"},"description":{"text":"animated value between 0 and 100"},"defaultValue":{"value":"0"}},{"name":"duration","type":{"name":"number"},"description":{"text":"Duration of current break (can be change between breaks)"},"defaultValue":{"value":"1000"}},{"name":"opacity","type":{"name":"number"},"description":{"text":"scanner opacity"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"scanner background color"},"defaultValue":null},{"name":"onBreakpoint","type":{"name":"func"},"description":{"text":"breakpoint callback - ({progress, isDone}) => {}"},"defaultValue":null},{"name":"hideScannerLine","type":{"name":"bool"},"description":{"text":"should hide the scanner line"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"the container style"},"defaultValue":null}]}},{"node":{"displayName":"Avatar","docblock":"@description: Avatar component for displaying user profile images\n@extends: TouchableOpacity, Image\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_1.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_2.png?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.tsx","description":{"text":"@description: Avatar component for displaying user profile images\n@extends: TouchableOpacity, Image\n@image: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_1.png?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_2.png?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.tsx"},"props":[{"name":"animate","type":{"name":"boolean"},"description":{"text":"Adds fade in animation when Avatar image loads"},"defaultValue":{"value":"false"}},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Background color for Avatar"},"defaultValue":null},{"name":"badgePosition","type":{"name":"BadgePosition"},"description":{"text":"Badge location on Avatar"},"defaultValue":{"value":"BadgePosition.TOP_RIGHT"}},{"name":"badgeProps","type":{"name":"BadgeProps"},"description":{"text":"Badge props passed down to Badge component"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Additional spacing styles for the container"},"defaultValue":null},{"name":"source","type":{"name":"ImageSourcePropType"},"description":{"text":"The image source (external or assets)"},"defaultValue":null},{"name":"imageSource","type":{"name":"ImageSourcePropType"},"description":{"text":""},"defaultValue":null},{"name":"imageProps","type":{"name":"ImageProps"},"description":{"text":"Image props object"},"defaultValue":null},{"name":"imageStyle","type":{"name":"ImageStyle"},"description":{"text":"Image style object used to pass additional style props\nby components which render image"},"defaultValue":null},{"name":"onImageLoadStart","type":{"name":"ImagePropsBase['onLoadStart']"},"description":{"text":"Listener-callback for when an image's (uri) loading\nstarts (equiv. to Image.onLoadStart())."},"defaultValue":null},{"name":"onImageLoadEnd","type":{"name":"ImagePropsBase['onLoadEnd']"},"description":{"text":"Listener-callback for when an image's (uri) loading\neither succeeds or fails (equiv. to Image.onLoadEnd())."},"defaultValue":null},{"name":"onImageLoadError","type":{"name":"ImagePropsBase['onError']"},"description":{"text":"Listener-callback for when an image's (uri) loading\nfails (equiv. to Image.onError())."},"defaultValue":null},{"name":"name","type":{"name":"string"},"description":{"text":"The name of the avatar user.\nIf no label is provided, the initials will be generated from the name.\nautoColorsConfig will use the name to create the background color of the Avatar."},"defaultValue":null},{"name":"useAutoColors","type":{"name":"boolean"},"description":{"text":"Hash the name (or label) to get a color, so each name will have a specific color.\nDefault is false."},"defaultValue":null},{"name":"autoColorsConfig","type":{"name":"{\n  /**\n   * Avatar colors to be used when useAutoColors is true\n   */\n  avatarColors?: string[];\n  /**\n   * Replace the default hashing function (name -> number)\n   */\n  hashFunction?: (name?: string) => number;\n  /**\n   * Background color in cases where the getBackgroundColor returns undefined.\n   */\n  defaultColor?: string;\n}"},"description":{"text":"Send this to use the name to infer a backgroundColor"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"Label that can represent initials"},"defaultValue":null},{"name":"labelColor","type":{"name":"string"},"description":{"text":"The label color"},"defaultValue":{"value":"Colors.grey10"}},{"name":"ribbonLabel","type":{"name":"string"},"description":{"text":"ribbon label to display on the avatar"},"defaultValue":null},{"name":"ribbonStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"ribbon custom style"},"defaultValue":null},{"name":"ribbonLabelStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"ribbon label custom style"},"defaultValue":null},{"name":"customRibbon","type":{"name":"JSX.Element"},"description":{"text":"Custom ribbon"},"defaultValue":null},{"name":"size","type":{"name":"number"},"description":{"text":"Custom size for the Avatar"},"defaultValue":{"value":"50"}},{"name":"onPress","type":{"name":"(props: any) => void"},"description":{"text":"Press handler"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"Used as a testing identifier"},"defaultValue":null}]}},{"node":{"displayName":"ActionBar","docblock":"@description: Quick actions bar, each action support Button component props\n@modifiers: margin, padding\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ActionBar/ActionBar.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ActionBarScreen.tsx","description":{"text":"@description: Quick actions bar, each action support Button component props\n@modifiers: margin, padding\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/ActionBar/ActionBar.gif?raw=true\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ActionBarScreen.tsx"},"props":[{"name":"height","type":{"name":"number"},"description":{"text":"action bar height"},"defaultValue":{"value":"48"}},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"action bar background color"},"defaultValue":{"value":"Colors.white"}},{"name":"actions","type":{"name":"ButtonProps[]"},"description":{"text":"actions for the action bar"},"defaultValue":null},{"name":"centered","type":{"name":"boolean"},"description":{"text":"should action be equally centered"},"defaultValue":null},{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":"use safe area, in case action bar attached to the bottom (default: true)"},"defaultValue":{"value":"true"}},{"name":"keepRelative","type":{"name":"boolean"},"description":{"text":"keep the action bar position relative instead of it absolute position"},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":"style the action bar"},"defaultValue":null}]}},{"node":{"displayName":"ActionSheet","docblock":"@description: Cross platform Action Sheet, with a support for native iOS solution\n@gif: https://media.giphy.com/media/l0HUpXOR6RqB2ct5S/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ActionSheetScreen.tsx","description":{"text":"@description: Cross platform Action Sheet, with a support for native iOS solution\n@gif: https://media.giphy.com/media/l0HUpXOR6RqB2ct5S/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ActionSheetScreen.tsx"},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":"Whether to show the action sheet or not"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"Title of the action sheet. Note: if both title and message are not passed will not render the title view at all"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"Message of the action sheet"},"defaultValue":null},{"name":"cancelButtonIndex","type":{"name":"number"},"description":{"text":"Index of the option represents the cancel action (to be displayed as the separated bottom bold button)"},"defaultValue":null},{"name":"destructiveButtonIndex","type":{"name":"number"},"description":{"text":"Index of the option represents the destructive action (will display red text. Usually used for 'delete' or\n'abort' actions)"},"defaultValue":null},{"name":"options","type":{"name":"Array<ButtonProps>"},"description":{"text":"List of options for the action sheet, follows the Button prop types (supply 'label' string and 'onPress'\nfunction)"},"defaultValue":null},{"name":"onDismiss","type":{"name":"DialogProps['onDismiss']"},"description":{"text":"callback for when dismissing the action sheet, usually used for setting visible prop to false"},"defaultValue":null},{"name":"useNativeIOS","type":{"name":"boolean"},"description":{"text":"Should use the native action sheet for iOS"},"defaultValue":null},{"name":"showCancelButton","type":{"name":"boolean"},"description":{"text":"When passed (only with useNativeIOS), will display a cancel button at the bottom (overrides cancelButtonIndex)"},"defaultValue":null},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Add or override style of the action sheet (wraps the title and actions)"},"defaultValue":null},{"name":"dialogStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Add or override style of the dialog wrapping the action sheet"},"defaultValue":null},{"name":"optionsStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Add or override style of the options list"},"defaultValue":null},{"name":"renderTitle","type":{"name":"() => JSX.Element"},"description":{"text":"Render custom title"},"defaultValue":null},{"name":"renderAction","type":{"name":"(\n  option: ButtonProps,\n  index: number,\n  onOptionPress: ActionSheetOnOptionPress\n) => JSX.Element"},"description":{"text":"Render custom action\nNote: you will need to call onOptionPress so the option's onPress will be called"},"defaultValue":null},{"name":"onModalDismissed","type":{"name":"DialogProps['onDialogDismissed']"},"description":{"text":"Called once the modal has been dismissed (iOS only, modal only)"},"defaultValue":null},{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":"Whether or not to handle SafeArea"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"testID for e2e tests"},"defaultValue":null}]}},{"node":{"displayName":"KeyboardAwareFlatList","docblock":"@description: A wrapper component which handles the FlatList insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js","description":{"text":"@description: A wrapper component which handles the FlatList insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js"},"props":[{"name":"getTextInputRefs","type":null,"description":{"text":""},"defaultValue":{"value":"() => {\n  return [];\n}"}}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"onScroll","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"AnimatedImage","docblock":"@description: Image component that fades-in the image with animation once it's loaded\n@extends: Animated.Image\n@gif: https://media.giphy.com/media/l0HU7jj0ivEFyZIA0/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AnimatedImageScreen.js","description":{"text":"@description: Image component that fades-in the image with animation once it's loaded\n@extends: Animated.Image\n@gif: https://media.giphy.com/media/l0HU7jj0ivEFyZIA0/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AnimatedImageScreen.js"},"props":[{"name":"containerStyle","type":{"name":"union"},"description":{"text":"Additional spacing styles for the container"},"defaultValue":null},{"name":"animationDuration","type":{"name":"number"},"description":{"text":"Duration for the fade animation when the image is loaded"},"defaultValue":{"value":"300"}},{"name":"loader","type":{"name":"element"},"description":{"text":"A component to render while the image is loading"},"defaultValue":null}]}},{"node":{"displayName":"KeyboardAwareScrollView","docblock":"@description: A wrapper component which handles the ScrollView insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js","description":{"text":"@description: A wrapper component which handles the ScrollView insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js"},"props":[{"name":"getTextInputRefs","type":null,"description":{"text":""},"defaultValue":{"value":"() => {\n  return [];\n}"}}]}},{"node":{"displayName":"Incubator.TouchableOpacity","docblock":"@description: a Better, enhanced TouchableOpacity component\n@modifiers: flex, margin, padding, background\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js","description":{"text":"@description: a Better, enhanced TouchableOpacity component\n@modifiers: flex, margin, padding, background\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js"},"props":[]}},{"node":{"displayName":"PanView","docblock":"","description":{"text":""},"props":[{"name":"directions","type":{"name":"PanViewDirections[]"},"description":{"text":"The directions of the allowed pan (default is all)\nTypes: UP, DOWN, LEFT and RIGHT (using PanView.directions.###)"},"defaultValue":null},{"name":"dismissible","type":{"name":"boolean"},"description":{"text":"Dismiss the view if over the threshold (translation or velocity)."},"defaultValue":null},{"name":"springBack","type":{"name":"boolean"},"description":{"text":"Animate to start if not dismissed."},"defaultValue":null},{"name":"onDismiss","type":{"name":"() => void"},"description":{"text":"Callback to the dismiss animation end"},"defaultValue":null},{"name":"directionLock","type":{"name":"boolean"},"description":{"text":"Should the direction of dragging be locked once a drag has started."},"defaultValue":null},{"name":"threshold","type":{"name":"PanViewDismissThreshold"},"description":{"text":"Object to adjust the dismiss threshold limits (eg {x, y, velocity})."},"defaultValue":{"value":"DEFAULT_THRESHOLD"}},{"name":"containerStyle","type":{"name":"StyleProp<ViewStyle>"},"description":{"text":"Add a style to the container"},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"ExpandableOverlay","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"Incubator.WheelPickerItem","docblock":"","description":{"text":""},"props":[{"name":"label","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"fakeLabel","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"fakeLabelStyle","type":{"name":"TextStyle"},"description":{"text":""},"defaultValue":null},{"name":"fakeLabelProps","type":{"name":"TextProps"},"description":{"text":""},"defaultValue":null},{"name":"value","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"index","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"offset","type":{"name":"Animated.SharedValue<number>"},"description":{"text":""},"defaultValue":null},{"name":"itemHeight","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"activeColor","type":{"name":"string"},"description":{"text":""},"defaultValue":{"value":"Colors.primary"}},{"name":"inactiveColor","type":{"name":"string"},"description":{"text":""},"defaultValue":{"value":"Colors.grey20"}},{"name":"style","type":{"name":"TextStyle"},"description":{"text":""},"defaultValue":null},{"name":"onSelect","type":{"name":"(index: number) => void"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"centerH","type":{"name":"boolean"},"description":{"text":""},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"Incubator.WheelPicker","docblock":"","description":{"text":""},"props":[{"name":"initialValue","type":{"name":"union"},"description":{"text":"Initial value (doesn't work with selectedValue)"},"defaultValue":null},{"name":"selectedValue","type":{"name":"union"},"description":{"text":"The current selected value"},"defaultValue":null},{"name":"items","type":{"name":"ItemProps[]"},"description":{"text":"Data source for WheelPicker"},"defaultValue":null},{"name":"itemHeight","type":{"name":"number"},"description":{"text":"Describe the height of each item in the WheelPicker\ndefault value: 44"},"defaultValue":{"value":"44"}},{"name":"numberOfVisibleRows","type":{"name":"number"},"description":{"text":"Describe the number of rows visible\ndefault value: 5"},"defaultValue":{"value":"5"}},{"name":"activeTextColor","type":{"name":"string"},"description":{"text":"Text color for the focused row"},"defaultValue":{"value":"Colors.primary"}},{"name":"inactiveTextColor","type":{"name":"string"},"description":{"text":"Text color for other, non-focused rows"},"defaultValue":null},{"name":"textStyle","type":{"name":"TextStyle"},"description":{"text":"Row text style"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"Additional label on the right of the item text"},"defaultValue":null},{"name":"labelStyle","type":{"name":"TextStyle"},"description":{"text":"The Additional label's style"},"defaultValue":null},{"name":"labelProps","type":{"name":"TextProps"},"description":{"text":"The Additional label's props"},"defaultValue":null},{"name":"onChange","type":{"name":"(item: string | number, index: number) => void"},"description":{"text":"Event, on active row change"},"defaultValue":null},{"name":"style","type":{"name":"Omit<ViewStyle, 'height'>"},"description":{"text":"Container's ViewStyle, height is computed according to itemHeight * numberOfVisibleRows"},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":"Support passing items as children props"},"defaultValue":null},{"name":"align","type":{"name":"WheelPickerAlign"},"description":{"text":"Align the content to center, right ot left (default: center)"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"TransitionView","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"Incubator.TouchableOpacity","docblock":"@description: a Better, enhanced TouchableOpacity component\n@modifiers: flex, margin, padding, background\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js","description":{"text":"@description: a Better, enhanced TouchableOpacity component\n@modifiers: flex, margin, padding, background\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js"},"props":[{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Background color"},"defaultValue":null},{"name":"feedbackColor","type":{"name":"string"},"description":{"text":"Background color when actively pressing the touchable"},"defaultValue":null},{"name":"activeOpacity","type":{"name":"number"},"description":{"text":"Opacity value when actively pressing the touchable"},"defaultValue":{"value":"0.2"}},{"name":"activeScale","type":{"name":"number"},"description":{"text":"Scale value when actively pressing the touchable"},"defaultValue":{"value":"1"}},{"name":"onPress","type":{"name":"(props: any) => void"},"description":{"text":"Callback for when tapping the touchable"},"defaultValue":{"value":"_.noop"}},{"name":"onLongPress","type":{"name":"(props: any) => void"},"description":{"text":"Callback for when long pressing the touchable"},"defaultValue":null},{"name":"pressState","type":{"name":"State"},"description":{"text":"Pass controlled pressState to track gesture state changes"},"defaultValue":null},{"name":"disabled","type":{"name":"boolean"},"description":{"text":"If true, disable all interactions for this component."},"defaultValue":null},{"name":"style","type":{"name":"ViewProps['style']"},"description":{"text":"Pass custom style"},"defaultValue":null},{"name":"onLayout","type":{"name":"(event: LayoutChangeEvent) => void"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Incubator.TextField","docblock":"","description":{"text":""},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"Field label"},"defaultValue":null},{"name":"labelColor","type":{"name":"ColorType"},"description":{"text":"Field label color. Either a string or color by state map ({default, focus, error, disabled})"},"defaultValue":{"value":"Colors.grey10"}},{"name":"labelStyle","type":{"name":"TextStyle"},"description":{"text":"Custom style for the field label"},"defaultValue":null},{"name":"labelProps","type":{"name":"TextProps"},"description":{"text":"Pass extra props to the label Text element"},"defaultValue":null},{"name":"validationMessagePosition","type":{"name":"ValidationMessagePosition"},"description":{"text":""},"defaultValue":null},{"name":"floatingPlaceholder","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Incubator.TextField","docblock":"","description":{"text":""},"props":[{"name":"hint","type":{"name":"string"},"description":{"text":"A hint text to display when focusing the field"},"defaultValue":null},{"name":"color","type":{"name":"ColorType"},"description":{"text":"Input color"},"defaultValue":{"value":"{\n  default: Colors.grey10,\n  disabled: Colors.grey40\n}"}},{"name":"placeholderTextColor","type":{"name":"ColorType"},"description":{"text":"placeholder text color"},"defaultValue":null}]}},{"node":{"displayName":"Incubator.TextField","docblock":"","description":{"text":""},"props":[{"name":"placeholder","type":{"name":"string"},"description":{"text":"The placeholder for the field"},"defaultValue":null},{"name":"floatingPlaceholderColor","type":{"name":"ColorType"},"description":{"text":"The floating placeholder color"},"defaultValue":{"value":"Colors.grey40"}},{"name":"floatingPlaceholderStyle","type":{"name":"StyleProp<TextStyle>"},"description":{"text":"Custom style to pass to the floating placeholder"},"defaultValue":null},{"name":"floatOnFocus","type":{"name":"boolean"},"description":{"text":"Should placeholder float on focus or when start typing"},"defaultValue":null},{"name":"validationMessagePosition","type":{"name":"ValidationMessagePosition"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Incubator.TextField","docblock":"","description":{"text":""},"props":[{"name":"enableErrors","type":{"name":"boolean"},"description":{"text":"Should support showing validation error message"},"defaultValue":null},{"name":"validationMessage","type":{"name":"union"},"description":{"text":"The validation message to display when field is invalid (depends on validate)"},"defaultValue":null},{"name":"validationMessageStyle","type":{"name":"TextStyle"},"description":{"text":"Custom style for the validation message"},"defaultValue":null},{"name":"retainSpace","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"validate","type":{"name":"FieldStateProps['validate']"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Incubator.TextField","docblock":"","description":{"text":""},"props":[{"name":"showCharCounter","type":{"name":"boolean"},"description":{"text":"Should show a character counter (works only with maxLength)"},"defaultValue":null},{"name":"maxLength","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"charCounterStyle","type":{"name":"TextStyle"},"description":{"text":"Pass custom style to character counter text"},"defaultValue":null}]}},{"node":{"displayName":"Incubator.TextField","docblock":"@description: A controlled, customizable TextField with validation support\n@extends: TextInput\n@extendsLink: https://reactnative.dev/docs/textinput\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/IncubatorTextFieldScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/FloatingPlaceholder.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Validation.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/ColorByState.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/CharCounter.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Hint.gif?raw=true","description":{"text":"@description: A controlled, customizable TextField with validation support\n@extends: TextInput\n@extendsLink: https://reactnative.dev/docs/textinput\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/IncubatorTextFieldScreen.tsx\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/FloatingPlaceholder.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Validation.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/ColorByState.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/CharCounter.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Incubator.TextField/Hint.gif?raw=true"},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"@description: TabController's TabBar component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js","description":{"text":"@description: TabController's TabBar component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js"},"props":[{"name":"items","type":{"name":"arrayOf"},"description":{"text":"The list of tab bar items"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"Tab Bar height"},"defaultValue":null},{"name":"enableShadow","type":{"name":"bool"},"description":{"text":"Show Tab Bar bottom shadow"},"defaultValue":null},{"name":"indicatorStyle","type":{"name":"custom"},"description":{"text":"custom style for the selected indicator"},"defaultValue":null},{"name":"labelStyle","type":{"name":"custom"},"description":{"text":"custom label style"},"defaultValue":null},{"name":"labelColor","type":{"name":"string"},"description":{"text":"the default label color"},"defaultValue":null},{"name":"selectedLabelColor","type":{"name":"string"},"description":{"text":"the selected label color"},"defaultValue":null},{"name":"uppercase","type":{"name":"bool"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"TODO: rename to feedbackColor\nApply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The TabBar container width"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"@description: TabController's TabBarItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: Must be rendered as a direct child of TabController.TabBar.","description":{"text":"@description: TabController's TabBarItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: Must be rendered as a direct child of TabController.TabBar."},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"label of the tab"},"defaultValue":null},{"name":"labelStyle","type":{"name":"custom"},"description":{"text":"custom label style"},"defaultValue":null},{"name":"labelColor","type":{"name":"string"},"description":{"text":"the default label color"},"defaultValue":null},{"name":"selectedLabelColor","type":{"name":"string"},"description":{"text":"the selected label color"},"defaultValue":null},{"name":"icon","type":{"name":"union"},"description":{"text":"icon of the tab"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"badge","type":{"name":"shape"},"description":{"text":"Badge component props to display next the item label"},"defaultValue":null},{"name":"width","type":{"name":"number"},"description":{"text":"A fixed width for the item"},"defaultValue":null},{"name":"ignore","type":{"name":"bool"},"description":{"text":"ignore of the tab"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"callback for when pressing a tab"},"defaultValue":{"value":"_.noop"}},{"name":"uppercase","type":{"name":"bool"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"activeOpacity","type":{"name":"number"},"description":{"text":"The active opacity when pressing a tab"},"defaultValue":{"value":"1"}},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"TODO: rename to feedbackColor\nApply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"index","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"state","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"currentPage","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"onLayout","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"@description: A performant solution for a tab controller with lazy load mechanism\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: This component is based on react-native-gesture-handler\n@important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation","description":{"text":"@description: A performant solution for a tab controller with lazy load mechanism\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: This component is based on react-native-gesture-handler\n@important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation"},"props":[{"name":"selectedIndex","type":{"name":"number"},"description":{"text":"TODO: change to initial index\ncurrent selected tab index"},"defaultValue":{"value":"0"}},{"name":"onChangeIndex","type":{"name":"func"},"description":{"text":"callback for when index has change (will not be called on ignored items)"},"defaultValue":null},{"name":"asCarousel","type":{"name":"bool"},"description":{"text":"When using TabController.PageCarousel this should be turned on"},"defaultValue":null},{"name":"activeOpacity","type":null,"description":{"text":""},"defaultValue":{"value":"0.2"}}]}},{"node":{"displayName":"IGNORE","docblock":"@description: TabController's TabPage\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js","description":{"text":"@description: TabController's TabPage\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js"},"props":[{"name":"index","type":{"name":"number"},"description":{"text":"The index of the the TabPage"},"defaultValue":null},{"name":"lazy","type":{"name":"bool"},"description":{"text":"Whether this page should be loaded lazily"},"defaultValue":null},{"name":"lazyLoadTime","type":{"name":"number"},"description":{"text":"How long to wait till lazy load complete (good for showing loader screens)"},"defaultValue":{"value":"300"}},{"name":"renderLoading","type":{"name":"elementType"},"description":{"text":"Render a custom loading page when lazy loading"},"defaultValue":{"value":"_.noop"}},{"name":"activeOpacity","type":null,"description":{"text":""},"defaultValue":{"value":"0.6"}}]}},{"node":{"displayName":"WheelPicker.Item","docblock":"","description":{"text":""},"props":[{"name":"value","type":{"name":"union"},"description":{"text":"the picker item value"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"the picker item display label"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"visible","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"overlayColor","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"strokeColor","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"strokeWidth","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"onRequestClose","type":{"name":"() => void"},"description":{"text":""},"defaultValue":null},{"name":"highlightFrame","type":{"name":"{\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":""},"defaultValue":null},{"name":"highlightViewTag","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"highlightViewTagParams","type":{"name":"{\n  padding: number | ViewStyle['padding'];\n  offset: Pick<HighlightFrameType, 'x' | 'y'>;\n}"},"description":{"text":""},"defaultValue":null},{"name":"minimumRectSize","type":{"name":"Pick<HighlightFrameType, 'width' | 'height'>"},"description":{"text":""},"defaultValue":null},{"name":"innerPadding","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"accessible","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"style","type":{"name":"ViewStyle"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"WheelPicker","docblock":"","description":{"text":""},"props":[{"name":"selectedValue","type":{"name":"union"},"description":{"text":"the current selected value of the picker"},"defaultValue":null},{"name":"onValueChange","type":{"name":"(value: string | number, index: number) => void"},"description":{"text":"callback for when a value change"},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":"pass custom style"},"defaultValue":null},{"name":"labelStyle","type":{"name":"TextStyle"},"description":{"text":"pass custom label style: fontSize, fontFamily, color<br>\nNote: label's color will override the text color (hex only)"},"defaultValue":{"value":"{fontSize: Typography.text70?.fontSize, fontFamily: Typography.text70?.fontFamily}"}},{"name":"itemHeight","type":{"name":"number"},"description":{"text":"The height of the selected item"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The color of the wheel picker (hex only)"},"defaultValue":{"value":"Colors.primary"}},{"name":"itemStyle","type":{"name":"ViewStyle"},"description":{"text":"pass custom style for the picker item"},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"KeyboardAwareInsetsView","docblock":"@description: Used to add an inset when a keyboard is used and might hide part of the screen.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n@notes: This view is useful only for iOS.","description":{"text":"@description: Used to add an inset when a keyboard is used and might hide part of the screen.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n@notes: This view is useful only for iOS."},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"KeyboardTrackingView","docblock":"@description: A UI component that enables “keyboard tracking\" for this view and it's sub-views.\nWould typically be used when you have a TextField or TextInput inside this view.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/KeyboardTrackingViewScreen.js\n@notes: This view is useful only for iOS.\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/KeyboardTrackingView/KeyboardTrackingView.gif?raw=true","description":{"text":"@description: A UI component that enables “keyboard tracking\" for this view and it's sub-views.\nWould typically be used when you have a TextField or TextInput inside this view.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/KeyboardTrackingViewScreen.js\n@notes: This view is useful only for iOS.\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/KeyboardTrackingView/KeyboardTrackingView.gif?raw=true"},"props":[{"name":"useSafeArea","type":null,"description":{"text":""},"defaultValue":{"value":"false"}}]}},{"node":{"displayName":"KeyboardTrackingView","docblock":"","description":{"text":""},"props":[{"name":"trackInteractive","type":{"name":"boolean"},"description":{"text":"Enables tracking of the keyboard when it's dismissed interactively (false by default).\nWhy? When using an external keyboard (BT),\nyou still get the keyboard events and the view just hovers when you focus the input.\nAlso, if you're not using interactive style of dismissing the keyboard\n(or if you don't have an input inside this view) it doesn't make sense to track it anyway.\n(This is caused because of the usage of inputAccessory to be able to track the\nkeyboard interactive change and it introduces this bug)"},"defaultValue":null},{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":"Allow control safe area"},"defaultValue":null},{"name":"scrollToFocusedInput","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"scrollBehavior","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"revealKeyboardInteractive","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"manageScrollView","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"requiresSameParentToManageScrollView","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"addBottomView","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"allowHitsOutsideBounds","type":{"name":"boolean"},"description":{"text":""},"defaultValue":null},{"name":"ref","type":{"name":"any"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"ViewStyle"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"KeyboardAccessoryView","docblock":"@description: View that allows replacing the default keyboard with other components\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardInput/KeyboardInputViewScreen.js\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/KeyboardAccessoryView/KeyboardAccessoryView.gif?raw=true","description":{"text":"@description: View that allows replacing the default keyboard with other components\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardInput/KeyboardInputViewScreen.js\n@gif: https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/KeyboardAccessoryView/KeyboardAccessoryView.gif?raw=true"},"props":[{"name":"renderContent","type":{"name":"() => React.ReactElement"},"description":{"text":"Content to be rendered above the keyboard"},"defaultValue":null},{"name":"onHeightChanged","type":{"name":"(height: number) => void"},"description":{"text":"A callback for when the height is changed"},"defaultValue":null},{"name":"kbInputRef","type":{"name":"any"},"description":{"text":"iOS only.\nThe reference to the actual text input (or the keyboard may not reset when instructed to, etc.).\nThis is required."},"defaultValue":null},{"name":"kbComponent","type":{"name":"string"},"description":{"text":"The keyboard ID (the componentID sent to KeyboardRegistry)"},"defaultValue":null},{"name":"kbInitialProps","type":{"name":"any"},"description":{"text":"The props that will be sent to the KeyboardComponent"},"defaultValue":null},{"name":"onItemSelected","type":{"name":"() => void"},"description":{"text":"Callback that will be called when an item on the keyboard has been pressed."},"defaultValue":null},{"name":"onRequestShowKeyboard","type":{"name":"() => void"},"description":{"text":"Callback that will be called if KeyboardRegistry.requestShowKeyboard is called."},"defaultValue":null},{"name":"onKeyboardResigned","type":{"name":"() => void"},"description":{"text":"Callback that will be called once the keyboard has been closed"},"defaultValue":null},{"name":"iOSScrollBehavior","type":{"name":"number"},"description":{"text":"iOS only.\nThe scrolling behavior, use KeyboardAccessoryView.iosScrollBehaviors.X where X is:\nNONE, SCROLL_TO_BOTTOM_INVERTED_ONLY or FIXED_OFFSET\n\ndefault: FIXED_OFFSET"},"defaultValue":{"value":"-1"}},{"name":"revealKeyboardInteractive","type":{"name":"boolean"},"description":{"text":"iOS only.\nShow the keyboard on a negative scroll\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"manageScrollView","type":{"name":"boolean"},"description":{"text":"iOS only.\nSet to false to turn off inset management and manage it yourself\n\ndefault: true"},"defaultValue":{"value":"true"}},{"name":"requiresSameParentToManageScrollView","type":{"name":"boolean"},"description":{"text":"iOS only.\nSet to true manageScrollView is set to true and still does not work,\nit means that the ScrollView found is the wrong one and you'll have\nto have the KeyboardAccessoryView and the ScrollView as siblings\nand set this to true\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"addBottomView","type":{"name":"boolean"},"description":{"text":"iOS only.\nAdd a (white) SafeArea view beneath the KeyboardAccessoryView\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"allowHitsOutsideBounds","type":{"name":"boolean"},"description":{"text":"iOS only.\nAllow hitting sub-views that are placed beyond the view bounds\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":"iOS only.\nWhether or not to handle SafeArea\ndefault: true"},"defaultValue":null},{"name":"children","type":{"name":"React.ReactChild"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"inputRef","type":{"name":"any"},"description":{"text":"The reference to the actual text input (or the keyboard may not reset when instructed to, etc.)"},"defaultValue":null},{"name":"useSafeArea","type":{"name":"boolean"},"description":{"text":""},"defaultValue":{"value":"true"}},{"name":"initialProps","type":null,"description":{"text":""},"defaultValue":{"value":"{}"}}]}},{"node":{"displayName":"CustomKeyboardView","docblock":"","description":{"text":""},"props":[]}}]}},"staticQueryHashes":["1243665866","3675868689"]}