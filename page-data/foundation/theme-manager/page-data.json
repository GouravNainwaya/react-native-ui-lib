{"componentChunkName":"component---src-templates-markdown-template-js","path":"/foundation/theme-manager","result":{"data":{"markdownRemark":{"html":"<p>Use the <code>ThemeManager</code> to set default global behavior for your app. </p>\n<h4>setComponentTheme</h4>\n<p>Set default props for a component by passing an object or a callback (for dynamic, runtime default props)<br>\nThe default value will be overridden if a prop is being passed to the component instance. (See <code>setComponentForcedTheme</code> for that)</p>\n<ul>\n<li><code>ThemeManager.setComponentTheme(componentName, defaultPropsObject);</code></li>\n<li><code>ThemeManager.setComponentTheme(componentName, componentProps => newDefaultPropsObject);</code></li>\n</ul>\n<p>Example</p>\n<pre><code class=\"language-js\">import {ThemeManager} from 'react-native-ui-lib';\n\nThemeManager.setComponentTheme('Text', {\n    text70: true, // will set the text70 typography modifier prop to be true by default\n    grey10: true, // will set the grey10 color modifier prop to be true by default \n});\n\n\nThemeManager.setComponentTheme('Button', (props, context) => {\n\n  return {\n    // this will apply a different backgroundColor\n    // depends if the Button is an outline or not\n    backgroundColor: props.outline ? 'black' : 'green',\n  };\n});\n</code></pre>\n<h4>setComponentForcedTheme</h4>\n<p>Same as <code>setComponentTheme</code> only it can't be overridden by props passed to the component. </p>\n<p>Example</p>\n<pre><code class=\"language-js\">ThemeManager.setComponentForcedTheme('Card', (props, context) => {\n  return {\n    containerStyle: [styles.defaultContainerStyle, props.containerStyle]\n  };\n});\n</code></pre>","frontmatter":{"path":"/foundation/theme-manager","title":"Theme Manager"}}},"pageContext":{}},"staticQueryHashes":["1243665866","3675868689"]}